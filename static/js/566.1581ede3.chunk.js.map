{"version":3,"file":"static/js/566.1581ede3.chunk.js","mappings":"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","sources":["component/NftTable.tsx","component/PageLayout.tsx","component/PageContent.tsx","component/PageFooter.tsx","config.ts","page/home/index.tsx","type.ts","utils.ts"],"sourcesContent":["import React from 'react';\nimport { Table, Typography } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport { toShortAddress } from '../utils';\nimport { NftClaimNetworks } from '../type';\nimport type { TypeNftTableDataSource } from '../type';\nimport { ethers } from 'ethers';\n\ntype TypePros = {\n  loading: boolean;\n  dataSource: TypeNftTableDataSource[];\n};\n\nconst columns: ColumnsType<TypeNftTableDataSource> = [\n  {\n    title: 'Index',\n    dataIndex: 'index',\n    key: 'index',\n    align: 'center',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n    align: 'center',\n    render: (text: string) => <Typography.Text copyable={{ text: text }}>{toShortAddress(text)}</Typography.Text>,\n  },\n  {\n    title: 'Claim Address',\n    dataIndex: 'claimAddress',\n    key: 'claimAddress',\n    align: 'center',\n    render: (text: { address: string; extrinsicHash: string; network: NftClaimNetworks } | null) =>\n      text ? (\n        <div className=\"inline-flex space-x-1\">\n          <Typography.Text\n            copyable={{ text: text.address }}\n            type={ethers.utils.isAddress(text.address) ? 'success' : 'danger'}\n          >\n            {toShortAddress(text.address)}\n          </Typography.Text>\n          <span>·</span>\n          <Typography.Link\n            target={'_blank'}\n            href={`${\n              text.network === NftClaimNetworks.CRAB\n                ? 'https://kusama.subscan.io/extrinsic/'\n                : 'https://polkadot.subscan.io/extrinsic/'\n            }${text.extrinsicHash}`}\n          >\n            extrinsic\n          </Typography.Link>\n        </div>\n      ) : (\n        <Typography.Text>None</Typography.Text>\n      ),\n  },\n  {\n    title: 'Is Claimed',\n    dataIndex: 'isClaimed',\n    key: 'isClaimed',\n    align: 'center',\n    render: (bool: boolean) => (\n      <Typography.Text type={bool ? 'success' : 'secondary'}>{bool ? 'Yes' : 'No'}</Typography.Text>\n    ),\n    filters: [\n      {\n        text: 'Yes',\n        value: true,\n      },\n      {\n        text: 'No',\n        value: false,\n      },\n    ],\n    onFilter: (value, record) => record.isClaimed === value,\n  },\n  {\n    title: 'Total Conntribute',\n    dataIndex: 'totalContribute',\n    key: 'totalContribute',\n    align: 'center',\n  },\n];\n\nconst Component: React.FC<TypePros> = (props) => (\n  <Table\n    columns={columns}\n    dataSource={props.dataSource}\n    loading={props.loading}\n    pagination={{\n      defaultPageSize: 50,\n      showQuickJumper: true,\n      showLessItems: true,\n      total: props.dataSource.length,\n      showTotal: (total) => `Total Items: ${total}`,\n    }}\n    scroll={{ y: 'calc(100vh - 20rem)', x: 'max-content' }}\n  />\n);\n\nexport const NftTable = React.memo<TypePros>(Component);\n","import React from 'react';\n\ntype TypeProps = {\n  className?: string;\n  children?: React.ReactNode;\n};\n\nconst Layout: React.FC<TypeProps> = (props) => (\n  <div className={`container mx-auto h-screen relative pb-14 ${props.className}`}>{props.children}</div>\n);\n\nexport const PageLayout = React.memo<TypeProps>(Layout);\n","import React from 'react';\n\ntype TypeProps = {\n  className?: string;\n  children?: React.ReactNode;\n};\n\nconst Content: React.FC<TypeProps> = (props) => (\n  <div className={`pt-6 page-content-height ${props.className}`}>{props.children}</div>\n);\n\nexport const PageContent = React.memo<TypeProps>(Content);\n","import React from 'react';\n\nexport const PageFooter: React.FC = () => (\n  <div className=\"absolute top-auto bottom-0 h-12 w-full flex justify-center items-center space-x-3\">\n    <span>Copyright©2022</span>\n    <span>|</span>\n    <a href=\"https://github.com/darwinia-network/plo-rewards-export\" target=\"_blank\" rel=\"noopener noreferrer\">\n      Github\n    </a>\n    <span>|</span>\n    <a href=\"https://crab.network/plo_contribute\" target=\"_blank\" rel=\"noopener noreferrer\">\n      Crab PLO\n    </a>\n    <span>|</span>\n    <a href=\"https://darwinia.network/plo_contribute\" target=\"_blank\" rel=\"noopener noreferrer\">\n      Darwinia PLO\n    </a>\n  </div>\n);\n","import Big from 'big.js';\nimport { gql } from '@apollo/client';\n\nexport const CRAB_REWARD = 200000000;\nexport const CKTON_REWARD = 8000;\nexport const STAGE_REWARDS_RATE = 0.075; // 7.5%\nexport const MIN_KSM_REWARDS = new Big('0.00000001');\nexport const DOT_PRECISIONS = new Big('10000000000');\nexport const KSM_PRECISIONS = new Big('1000000000000');\nexport const CRAB_PRECISIONS = new Big('1000000000');\nexport const SUBSTRATE_PREFIX = 42;\n\nexport const GET_USERS_CLAIM_REMARKS = gql`\n  query GetUserClaimRemarks($first: Int!, $after: String!) {\n    claimRemarksConnection(orderBy: [blockNumber_ASC], first: $first, after: $after) {\n      totalCount\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          signer\n          addressValue\n          extrinsicHash\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_USERS_CLAIM_REMARKS_TRY = gql`\n  query GetUserClaimRemarks($first: Int!) {\n    claimRemarksConnection(orderBy: [blockNumber_ASC], first: $first) {\n      totalCount\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          signer\n          addressValue\n          extrinsicHash\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { PageLayout, PageContent, PageFooter } from '../../component';\n\ntype TypeCustomLink = {\n  to: string;\n  text: string;\n};\n\nconst CustomLink: React.FC<TypeCustomLink> = (props) => (\n  <Link\n    to={props.to}\n    className=\"rounded-xl w-80 h-32 flex justify-center items-center transition-transform duration-300 hover:scale-110 text-lg font-black text-blue-400 nav-link\"\n  >\n    <span className=\"mr-5\">{props.text}</span>\n  </Link>\n);\n\nconst Page: React.FC = () => {\n  return (\n    <PageLayout>\n      <PageContent className=\"flex items-center justify-center\">\n        <nav className=\"flex flex-col space-y-7 pb-32\">\n          <CustomLink to=\"/crab/nft\" text=\"Crab NFT\" />\n          <CustomLink to=\"/darwinia/nft\" text=\"Darwinia NFT\" />\n          <CustomLink to=\"/crab/rewards\" text=\"Crab Rewards\" />\n          <CustomLink to=\"/crab/airdrop\" text=\"Crab Airdrop\" />\n        </nav>\n      </PageContent>\n      <PageFooter />\n    </PageLayout>\n  );\n};\n\nexport default React.memo(Page);\n","export type TypeReferralsNode = {\n  user: string;\n  totalPower: string;\n  totalBalance: string;\n};\n\nexport type TypeContributorsNode = {\n  user: string;\n  totalPower: string;\n  totalBalance: string;\n};\n\nexport type TypeGetUserNftClaimRemarkNode = {\n  signer: string;\n  addressValue: string;\n  extrinsicHash: string;\n};\n\nexport type TypeGetUsersNFTClaimRemark = {\n  totalCount: number;\n  pageInfo: {\n    hasNextPage: boolean;\n    endCursor: string;\n  };\n  edges: { node: TypeGetUserNftClaimRemarkNode }[];\n};\n\nexport type TypeRewardsTableDataSource = {\n  key: number;\n  index: number;\n  address: string;\n  ksmAsContributor: string;\n  ksmAsReferral: string;\n  crabRewards: string;\n  cktonRewards: string;\n  stageCRabRewards: string;\n  stageCKtonRewards: string;\n};\n\nexport enum NftClaimNetworks {\n  CRAB,\n  DARWINIA,\n}\n\nexport type TypeNftTableDataSource = {\n  key: number;\n  index: number;\n  address: string;\n  totalContribute: string;\n  claimAddress: { address: string; extrinsicHash: string; network: NftClaimNetworks } | null;\n  isClaimed: boolean;\n};\n","import { decodeAddress, encodeAddress } from '@polkadot/keyring';\nimport { hexToU8a, u8aToHex, stringToU8a, numberToU8a, isNull } from '@polkadot/util';\nimport { TypeRegistry } from '@polkadot/types';\nimport type { Codec, DetectCodec } from '@polkadot/types/types';\nimport { Keyring } from '@polkadot/keyring';\nimport Big from 'big.js';\nimport { ethers } from 'ethers';\nimport {\n  CRAB_REWARD,\n  CKTON_REWARD,\n  DOT_PRECISIONS,\n  KSM_PRECISIONS,\n  STAGE_REWARDS_RATE,\n  SUBSTRATE_PREFIX,\n} from './config';\nimport type {\n  TypeGetUserNftClaimRemarkNode,\n  TypeContributorsNode,\n  TypeReferralsNode,\n  TypeRewardsTableDataSource,\n  TypeNftTableDataSource,\n} from './type';\nimport { NftClaimNetworks } from './type';\n\nexport const toShortAddress = (address = '') => {\n  if (address.length && address.length > 12) {\n    return `${address.slice(0, 5)}...${address.slice(address.length - 5)}`;\n  }\n  return address;\n};\n\nexport const registry = new TypeRegistry();\n\nexport function dvmAddressToAccountId(address: string | null | undefined): DetectCodec<Codec, string> {\n  if (!address) {\n    return registry.createType('AccountId', '');\n  }\n\n  // eslint-disable-next-line no-magic-numbers\n  const data = new Uint8Array(32);\n\n  data.set(stringToU8a('dvm:'));\n  // eslint-disable-next-line no-magic-numbers\n  data.set(hexToU8a(address), 11);\n  // eslint-disable-next-line no-bitwise\n  const checksum = data.reduce((pre: number, current: number): number => pre ^ current);\n\n  // eslint-disable-next-line no-magic-numbers\n  data.set(numberToU8a(checksum), 31);\n  const accountId = registry.createType('AccountId', data);\n\n  return accountId;\n}\n\nexport function convertToSS58(text: string, prefix: number | null, isShort = false): string {\n  if (!text || isNull(prefix)) {\n    return '';\n  }\n\n  try {\n    let address = encodeAddress(text, prefix);\n\n    if (isShort) {\n      address = toShortAddress(address);\n    }\n\n    return address;\n  } catch (error) {\n    return '';\n  }\n}\n\nexport const polkadotAddressToPublicKey = (address: string) => u8aToHex(decodeAddress(address));\nexport const publicKeyToPolkadotAddress = (publicKey: string) => {\n  try {\n    const address = encodeAddress(hexToU8a(publicKey));\n    const keyring = new Keyring();\n    keyring.setSS58Format(2); // Kusama format address\n    return keyring.addFromAddress(address).address;\n  } catch (error) {\n    console.error(error);\n    return publicKey;\n  }\n};\n\nexport const downloadCsv = (data: string, filename = 'transferx.csv', type = 'data:text/csv;charset=utf-8') => {\n  const file = new Blob(['\\ufeff' + data], { type: type });\n  const url = URL.createObjectURL(file);\n\n  const a = document.createElement('a');\n  a.style.display = 'none';\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n\n  setTimeout(function () {\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }, 0);\n};\n\nexport const transformRewardsData = (nodesContributor: TypeContributorsNode[], nodesReferral: TypeReferralsNode[]) => {\n  let totalPower = Big(0);\n  let totalBalance = Big(0);\n  let totalStageCRab = Big(0);\n  let totalStageCKton = Big(0);\n  const csvRows: string[][] = [];\n  const rewardsTableDataSource: TypeRewardsTableDataSource[] = [];\n\n  nodesReferral.forEach((node) => {\n    totalPower = totalPower.add(node.totalPower);\n  });\n  nodesContributor.forEach((node) => {\n    totalPower = totalPower.add(node.totalPower);\n    totalBalance = totalBalance.add(node.totalBalance);\n  });\n\n  nodesContributor.forEach((nodeContributor) => {\n    const nodeReferral = nodesReferral.find((v) => v.user === polkadotAddressToPublicKey(nodeContributor.user));\n    const share = Big(nodeContributor.totalPower)\n      .add(nodeReferral ? nodeReferral.totalPower : 0)\n      .div(totalPower);\n\n    const crabRewards = share.times(CRAB_REWARD);\n    const cktonRewards = share.times(CKTON_REWARD);\n\n    const stageCRabReward = crabRewards.times(STAGE_REWARDS_RATE);\n    const stageCKtonReward = cktonRewards.times(STAGE_REWARDS_RATE);\n\n    totalStageCRab = totalStageCRab.add(stageCRabReward);\n    totalStageCKton = totalStageCKton.add(stageCKtonReward);\n\n    csvRows.push([nodeContributor.user, 'ring', stageCRabReward.toFixed(8), 'kusama']);\n    csvRows.push([nodeContributor.user, 'kton', stageCKtonReward.toFixed(8), 'kusama']);\n\n    rewardsTableDataSource.push({\n      key: rewardsTableDataSource.length,\n      index: rewardsTableDataSource.length + 1,\n      address: nodeContributor.user,\n      ksmAsContributor: Big(nodeContributor.totalBalance).div(KSM_PRECISIONS).toFixed(8),\n      ksmAsReferral: Big(nodeReferral ? nodeReferral.totalBalance : 0)\n        .div(KSM_PRECISIONS)\n        .toFixed(8),\n      crabRewards: crabRewards.toFixed(8),\n      cktonRewards: cktonRewards.toFixed(8),\n      stageCRabRewards: stageCRabReward.toFixed(8),\n      stageCKtonRewards: stageCKtonReward.toFixed(8),\n    });\n  });\n\n  nodesReferral.forEach((nodeReferral) => {\n    const address = publicKeyToPolkadotAddress(nodeReferral.user);\n    if (!rewardsTableDataSource.find((v) => v.address === address)) {\n      const share = Big(nodeReferral.totalPower).div(totalPower);\n\n      const crabRewards = share.times(CRAB_REWARD);\n      const cktonRewards = share.times(CKTON_REWARD);\n\n      const stageCRabReward = crabRewards.times(STAGE_REWARDS_RATE);\n      const stageCKtonReward = cktonRewards.times(STAGE_REWARDS_RATE);\n\n      totalStageCRab = totalStageCRab.add(stageCRabReward);\n      totalStageCKton = totalStageCKton.add(stageCKtonReward);\n\n      csvRows.push([address, 'ring', stageCRabReward.toFixed(8), 'kusama']);\n      csvRows.push([address, 'kton', stageCKtonReward.toFixed(8), 'kusama']);\n\n      rewardsTableDataSource.push({\n        key: rewardsTableDataSource.length,\n        index: rewardsTableDataSource.length + 1,\n        address: address,\n        ksmAsContributor: Big(0).toFixed(8),\n        ksmAsReferral: Big(nodeReferral.totalBalance).div(KSM_PRECISIONS).toFixed(8),\n        crabRewards: crabRewards.toFixed(8),\n        cktonRewards: cktonRewards.toFixed(8),\n        stageCRabRewards: stageCRabReward.toFixed(8),\n        stageCKtonRewards: stageCKtonReward.toFixed(8),\n      });\n    }\n  });\n\n  return {\n    totalPower: totalPower.toString(),\n    totalBalance: totalBalance.div(KSM_PRECISIONS).toFixed(8),\n    totalStageCRab: totalStageCRab.toFixed(0),\n    totalStageCKton: totalStageCKton.toFixed(0),\n    csvRows,\n    rewardsTableDataSource,\n  };\n};\n\nexport const transformNftsData = (\n  data: string[][],\n  statistics: [string, number][],\n  nodes: TypeGetUserNftClaimRemarkNode[],\n  network: NftClaimNetworks\n) => {\n  const csvRowsTotal: string[][] = [];\n  const csvRowsClaimed: string[][] = [];\n  const csvRowsUnclaim: string[][] = [];\n  const csvRowsNewClaim: string[][] = [];\n  let nftTableDataSource: TypeNftTableDataSource[] = [];\n\n  const precision = network === NftClaimNetworks.CRAB ? KSM_PRECISIONS : DOT_PRECISIONS;\n\n  for (let value of data) {\n    const claim = nodes?.find(\n      (v) => convertToSS58(v.signer, SUBSTRATE_PREFIX) === convertToSS58(value[0], SUBSTRATE_PREFIX)\n    );\n    const contribute = Big(value[1]).div(precision).toFixed(8);\n    nftTableDataSource.push({\n      key: 0,\n      index: 0,\n      address: value[0],\n      totalContribute: contribute,\n      claimAddress: claim ? { address: claim.addressValue, extrinsicHash: claim.extrinsicHash, network } : null,\n      isClaimed: claim ? true : false,\n    });\n    csvRowsTotal.push([value[0], claim ? claim.addressValue : 'unclaim', contribute]);\n    claim && ethers.utils.isAddress(claim.addressValue)\n      ? csvRowsClaimed.push([value[0], claim.addressValue, contribute])\n      : csvRowsUnclaim.push([value[0], contribute]);\n\n    const statisticsItem = statistics.find((v) => v[0] === value[0]);\n    if (statisticsItem) {\n      if (claim && statisticsItem[1] === 0) {\n        csvRowsNewClaim.push([value[0], claim.addressValue, contribute]);\n      }\n    } else {\n      console.warn(`[Statistics]${value[0]} not found in`);\n    }\n  }\n\n  nftTableDataSource = nftTableDataSource.map((value, index) => ({\n    ...value,\n    key: index,\n    index: nftTableDataSource.length - index,\n  }));\n\n  return {\n    nftTableDataSource,\n    csvRowsTotal,\n    csvRowsClaimed,\n    csvRowsUnclaim,\n    csvRowsNewClaim,\n  };\n};\n"],"names":["columns","title","dataIndex","key","align","render","text","copyable","toShortAddress","className","address","type","ethers","target","href","network","NftClaimNetworks","extrinsicHash","bool","filters","value","onFilter","record","isClaimed","Component","props","dataSource","loading","pagination","defaultPageSize","showQuickJumper","showLessItems","total","length","showTotal","scroll","y","x","NftTable","React","Layout","children","PageLayout","Content","PageContent","PageFooter","rel","CRAB_REWARD","CKTON_REWARD","CRAB_PRECISIONS","Big","SUBSTRATE_PREFIX","GET_USERS_CLAIM_REMARKS","gql","GET_USERS_CLAIM_REMARKS_TRY","CustomLink","to","Page","slice","registry","TypeRegistry","dvmAddressToAccountId","createType","data","Uint8Array","set","stringToU8a","hexToU8a","checksum","reduce","pre","current","numberToU8a","convertToSS58","prefix","isShort","isNull","encodeAddress","error","downloadCsv","filename","file","Blob","url","URL","createObjectURL","a","document","createElement","style","display","download","body","appendChild","click","setTimeout","removeChild","window","revokeObjectURL"],"sourceRoot":""}