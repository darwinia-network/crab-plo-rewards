{"version":3,"file":"static/js/425.f253a283.chunk.js","mappings":"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","sources":["config.ts","type.ts","utils.ts","page/crab-rewards/worker.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/node module decorator","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import Big from 'big.js';\nimport { gql } from '@apollo/client';\n\nexport const CRAB_REWARD = 200000000;\nexport const CKTON_REWARD = 8000;\nexport const STAGE_REWARDS_RATE = 0.075; // 7.5%\nexport const MIN_KSM_REWARDS = new Big('0.00000001');\nexport const DOT_PRECISIONS = new Big('10000000000');\nexport const KSM_PRECISIONS = new Big('1000000000000');\nexport const CRAB_PRECISIONS = new Big('1000000000');\nexport const SUBSTRATE_PREFIX = 42;\n\nexport const GET_USERS_NFT_CLAIMED = gql`\n  query GetUserNftClaimed($first: Int!, $offset: Int!) {\n    remarkedNftAddresses(orderBy: [EXTRINSIC_TIMESTAMP_ASC], first: $first, offset: $offset) {\n      totalCount\n      pageInfo {\n        hasNextPage\n      }\n      nodes {\n        signer\n        addressValue\n        extrinsicHash\n      }\n    }\n  }\n`;\n","export type TypeReferralsNode = {\n  user: string;\n  totalPower: string;\n  totalBalance: string;\n};\n\nexport type TypeContributorsNode = {\n  user: string;\n  totalPower: string;\n  totalBalance: string;\n};\n\nexport type TypeGetUserNftClaimedNode = {\n  signer: string;\n  addressValue: string;\n  extrinsicHash: string;\n};\n\nexport type TypeGetUsersNftClaimed = {\n  totalCount: number;\n  pageInfo: {\n    hasNextPage: boolean;\n  };\n  nodes: TypeGetUserNftClaimedNode[];\n};\n\nexport type TypeRewardsTableDataSource = {\n  key: number;\n  index: number;\n  address: string;\n  ksmAsContributor: string;\n  ksmAsReferral: string;\n  crabRewards: string;\n  cktonRewards: string;\n  stageCRabRewards: string;\n  stageCKtonRewards: string;\n};\n\nexport enum NftClaimNetworks {\n  CRAB,\n  DARWINIA,\n}\n\nexport type TypeNftTableDataSource = {\n  key: number;\n  index: number;\n  address: string;\n  totalContribute: string;\n  claimAddress: { address: string; extrinsicHash: string; network: NftClaimNetworks } | null;\n  isClaimed: boolean;\n};\n","import { decodeAddress, encodeAddress } from '@polkadot/keyring';\nimport { hexToU8a, u8aToHex, stringToU8a, numberToU8a, isNull } from '@polkadot/util';\nimport { TypeRegistry } from '@polkadot/types';\nimport type { Codec, DetectCodec } from '@polkadot/types/types';\nimport { Keyring } from '@polkadot/keyring';\nimport Big from 'big.js';\nimport { ethers } from 'ethers';\nimport { CRAB_REWARD, CKTON_REWARD, DOT_PRECISIONS, KSM_PRECISIONS, STAGE_REWARDS_RATE } from './config';\nimport type {\n  TypeGetUserNftClaimedNode,\n  TypeContributorsNode,\n  TypeReferralsNode,\n  TypeRewardsTableDataSource,\n  TypeNftTableDataSource,\n} from './type';\nimport { NftClaimNetworks } from './type';\n\nexport const toShortAddress = (address = '') => {\n  if (address.length && address.length > 12) {\n    return `${address.slice(0, 5)}...${address.slice(address.length - 5)}`;\n  }\n  return address;\n};\n\nexport const registry = new TypeRegistry();\n\nexport function dvmAddressToAccountId(address: string | null | undefined): DetectCodec<Codec, string> {\n  if (!address) {\n    return registry.createType('AccountId', '');\n  }\n\n  // eslint-disable-next-line no-magic-numbers\n  const data = new Uint8Array(32);\n\n  data.set(stringToU8a('dvm:'));\n  // eslint-disable-next-line no-magic-numbers\n  data.set(hexToU8a(address), 11);\n  // eslint-disable-next-line no-bitwise\n  const checksum = data.reduce((pre: number, current: number): number => pre ^ current);\n\n  // eslint-disable-next-line no-magic-numbers\n  data.set(numberToU8a(checksum), 31);\n  const accountId = registry.createType('AccountId', data);\n\n  return accountId;\n}\n\nexport function convertToSS58(text: string, prefix: number | null, isShort = false): string {\n  if (!text || isNull(prefix)) {\n    return '';\n  }\n\n  try {\n    let address = encodeAddress(text, prefix);\n\n    if (isShort) {\n      address = toShortAddress(address);\n    }\n\n    return address;\n  } catch (error) {\n    return '';\n  }\n}\n\nexport const polkadotAddressToPublicKey = (address: string) => u8aToHex(decodeAddress(address));\nexport const publicKeyToPolkadotAddress = (publicKey: string) => {\n  try {\n    const address = encodeAddress(hexToU8a(publicKey));\n    const keyring = new Keyring();\n    keyring.setSS58Format(2); // Kusama format address\n    return keyring.addFromAddress(address).address;\n  } catch (error) {\n    console.error(error);\n    return publicKey;\n  }\n};\n\nexport const downloadCsv = (data: string, filename = 'transferx.csv', type = 'data:text/csv;charset=utf-8') => {\n  const file = new Blob(['\\ufeff' + data], { type: type });\n  const url = URL.createObjectURL(file);\n\n  const a = document.createElement('a');\n  a.style.display = 'none';\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n\n  setTimeout(function () {\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }, 0);\n};\n\nexport const transformRewardsData = (nodesContributor: TypeContributorsNode[], nodesReferral: TypeReferralsNode[]) => {\n  let totalPower = Big(0);\n  let totalBalance = Big(0);\n  let totalStageCRab = Big(0);\n  let totalStageCKton = Big(0);\n  const csvRows: string[][] = [];\n  const rewardsTableDataSource: TypeRewardsTableDataSource[] = [];\n\n  nodesReferral.forEach((node) => {\n    totalPower = totalPower.add(node.totalPower);\n  });\n  nodesContributor.forEach((node) => {\n    totalPower = totalPower.add(node.totalPower);\n    totalBalance = totalBalance.add(node.totalBalance);\n  });\n\n  nodesContributor.forEach((nodeContributor) => {\n    const nodeReferral = nodesReferral.find((v) => v.user === polkadotAddressToPublicKey(nodeContributor.user));\n    const share = Big(nodeContributor.totalPower)\n      .add(nodeReferral ? nodeReferral.totalPower : 0)\n      .div(totalPower);\n\n    const crabRewards = share.times(CRAB_REWARD);\n    const cktonRewards = share.times(CKTON_REWARD);\n\n    const stageCRabReward = crabRewards.times(STAGE_REWARDS_RATE);\n    const stageCKtonReward = cktonRewards.times(STAGE_REWARDS_RATE);\n\n    totalStageCRab = totalStageCRab.add(stageCRabReward);\n    totalStageCKton = totalStageCKton.add(stageCKtonReward);\n\n    csvRows.push([nodeContributor.user, 'ring', stageCRabReward.toFixed(8), 'kusama']);\n    csvRows.push([nodeContributor.user, 'kton', stageCKtonReward.toFixed(8), 'kusama']);\n\n    rewardsTableDataSource.push({\n      key: rewardsTableDataSource.length,\n      index: rewardsTableDataSource.length + 1,\n      address: nodeContributor.user,\n      ksmAsContributor: Big(nodeContributor.totalBalance).div(KSM_PRECISIONS).toFixed(8),\n      ksmAsReferral: Big(nodeReferral ? nodeReferral.totalBalance : 0)\n        .div(KSM_PRECISIONS)\n        .toFixed(8),\n      crabRewards: crabRewards.toFixed(8),\n      cktonRewards: cktonRewards.toFixed(8),\n      stageCRabRewards: stageCRabReward.toFixed(8),\n      stageCKtonRewards: stageCKtonReward.toFixed(8),\n    });\n  });\n\n  nodesReferral.forEach((nodeReferral) => {\n    const address = publicKeyToPolkadotAddress(nodeReferral.user);\n    if (!rewardsTableDataSource.find((v) => v.address === address)) {\n      const share = Big(nodeReferral.totalPower).div(totalPower);\n\n      const crabRewards = share.times(CRAB_REWARD);\n      const cktonRewards = share.times(CKTON_REWARD);\n\n      const stageCRabReward = crabRewards.times(STAGE_REWARDS_RATE);\n      const stageCKtonReward = cktonRewards.times(STAGE_REWARDS_RATE);\n\n      totalStageCRab = totalStageCRab.add(stageCRabReward);\n      totalStageCKton = totalStageCKton.add(stageCKtonReward);\n\n      csvRows.push([address, 'ring', stageCRabReward.toFixed(8), 'kusama']);\n      csvRows.push([address, 'kton', stageCKtonReward.toFixed(8), 'kusama']);\n\n      rewardsTableDataSource.push({\n        key: rewardsTableDataSource.length,\n        index: rewardsTableDataSource.length + 1,\n        address: address,\n        ksmAsContributor: Big(0).toFixed(8),\n        ksmAsReferral: Big(nodeReferral.totalBalance).div(KSM_PRECISIONS).toFixed(8),\n        crabRewards: crabRewards.toFixed(8),\n        cktonRewards: cktonRewards.toFixed(8),\n        stageCRabRewards: stageCRabReward.toFixed(8),\n        stageCKtonRewards: stageCKtonReward.toFixed(8),\n      });\n    }\n  });\n\n  return {\n    totalPower: totalPower.toString(),\n    totalBalance: totalBalance.div(KSM_PRECISIONS).toFixed(8),\n    totalStageCRab: totalStageCRab.toFixed(0),\n    totalStageCKton: totalStageCKton.toFixed(0),\n    csvRows,\n    rewardsTableDataSource,\n  };\n};\n\nexport const transformNftsData = (\n  data: string[][],\n  statistics: [string, number][],\n  nodes: TypeGetUserNftClaimedNode[],\n  network: NftClaimNetworks\n) => {\n  const csvRowsTotal: string[][] = [];\n  const csvRowsClaimed: string[][] = [];\n  const csvRowsUnclaim: string[][] = [];\n  const csvRowsNewClaim: string[][] = [];\n  let nftTableDataSource: TypeNftTableDataSource[] = [];\n\n  const precision = network === NftClaimNetworks.CRAB ? KSM_PRECISIONS : DOT_PRECISIONS;\n\n  for (let value of data) {\n    const claim = nodes?.find((v) => v.signer === value[0]);\n    const contribute = Big(value[1]).div(precision).toFixed(8);\n    nftTableDataSource.push({\n      key: 0,\n      index: 0,\n      address: value[0],\n      totalContribute: contribute,\n      claimAddress: claim ? { address: claim.addressValue, extrinsicHash: claim.extrinsicHash, network } : null,\n      isClaimed: claim ? true : false,\n    });\n    csvRowsTotal.push([value[0], claim ? claim.addressValue : 'unclaim', contribute]);\n    claim && ethers.utils.isAddress(claim.addressValue)\n      ? csvRowsClaimed.push([value[0], claim.addressValue, contribute])\n      : csvRowsUnclaim.push([value[0], contribute]);\n\n    const statisticsItem = statistics.find((v) => v[0] === value[0]);\n    if (statisticsItem) {\n      if (claim && statisticsItem[1] === 0) {\n        csvRowsNewClaim.push([value[0], claim.addressValue, contribute]);\n      }\n    } else {\n      console.warn(`[Statistics]${value[0]} not found in`);\n    }\n  }\n\n  nftTableDataSource = nftTableDataSource.map((value, index) => ({\n    ...value,\n    key: index,\n    index: nftTableDataSource.length - index,\n  }));\n\n  return {\n    nftTableDataSource,\n    csvRowsTotal,\n    csvRowsClaimed,\n    csvRowsUnclaim,\n    csvRowsNewClaim,\n  };\n};\n","import { transformRewardsData } from '../../utils';\n\nonmessage = () => {\n  const crowdloanWhoStatistics = require('./data/crowdloanWhoStatistics.json');\n  const crowdloanReferStatistics = require('./data/crowdloanReferStatistics.json');\n  const result = transformRewardsData(\n    crowdloanWhoStatistics.data.crowdloanWhoStatistics.nodes,\n    crowdloanReferStatistics.data.crowdloanReferStatistics.nodes\n  );\n  postMessage(result);\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [743,720,370,353], () => (__webpack_require__(7139)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"353\":\"75b9ebc8\",\"370\":\"10d66f69\",\"720\":\"6a376766\",\"743\":\"b87e6081\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/plo-rewards-export/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t425: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkplo_rewards_export\"] = self[\"webpackChunkplo_rewards_export\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([743,720,370,353].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["CRAB_REWARD","STAGE_REWARDS_RATE","KSM_PRECISIONS","Big","gql","NftClaimNetworks","TypeRegistry","transformRewardsData","nodesContributor","nodesReferral","totalPower","totalBalance","totalStageCRab","totalStageCKton","csvRows","rewardsTableDataSource","forEach","node","add","nodeContributor","nodeReferral","find","v","user","address","u8aToHex","decodeAddress","share","div","crabRewards","times","cktonRewards","stageCRabReward","stageCKtonReward","push","toFixed","key","length","index","ksmAsContributor","ksmAsReferral","stageCRabRewards","stageCKtonRewards","publicKey","encodeAddress","hexToU8a","keyring","Keyring","setSS58Format","addFromAddress","error","console","publicKeyToPolkadotAddress","toString","onmessage","crowdloanWhoStatistics","require","crowdloanReferStatistics","result","data","nodes","postMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","id","loaded","__webpack_modules__","call","m","x","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","f","e","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","value","nmd","paths","children","p","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next","map","then"],"sourceRoot":""}