{"version":3,"file":"static/js/544.dc70f2fb.chunk.js","mappings":"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","sources":["component/NftTable.tsx","component/PageLayout.tsx","component/PageContent.tsx","component/PageFooter.tsx","config.ts","page/crab-airdrop/index.tsx","hook/useApi.ts","type.ts","utils.ts"],"sourcesContent":["import React from 'react';\nimport { Table, Typography } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport { toShortAddress } from '../utils';\nimport { NftClaimNetworks } from '../type';\nimport type { TypeNftTableDataSource } from '../type';\nimport { ethers } from 'ethers';\n\ntype TypePros = {\n  loading: boolean;\n  dataSource: TypeNftTableDataSource[];\n};\n\nconst columns: ColumnsType<TypeNftTableDataSource> = [\n  {\n    title: 'Index',\n    dataIndex: 'index',\n    key: 'index',\n    align: 'center',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n    align: 'center',\n    render: (text: string) => <Typography.Text copyable={{ text: text }}>{toShortAddress(text)}</Typography.Text>,\n  },\n  {\n    title: 'Claim Address',\n    dataIndex: 'claimAddress',\n    key: 'claimAddress',\n    align: 'center',\n    render: (text: { address: string; extrinsicHash: string; network: NftClaimNetworks } | null) =>\n      text ? (\n        <div className=\"inline-flex space-x-1\">\n          <Typography.Text\n            copyable={{ text: text.address }}\n            type={ethers.utils.isAddress(text.address) ? 'success' : 'danger'}\n          >\n            {toShortAddress(text.address)}\n          </Typography.Text>\n          <span>Â·</span>\n          <Typography.Link\n            target={'_blank'}\n            href={`${\n              text.network === NftClaimNetworks.CRAB\n                ? 'https://kusama.subscan.io/extrinsic/'\n                : 'https://polkadot.subscan.io/extrinsic/'\n            }${text.extrinsicHash}`}\n          >\n            extrinsic\n          </Typography.Link>\n        </div>\n      ) : (\n        <Typography.Text>None</Typography.Text>\n      ),\n  },\n  {\n    title: 'Is Claimed',\n    dataIndex: 'isClaimed',\n    key: 'isClaimed',\n    align: 'center',\n    render: (bool: boolean) => (\n      <Typography.Text type={bool ? 'success' : 'secondary'}>{bool ? 'Yes' : 'No'}</Typography.Text>\n    ),\n    filters: [\n      {\n        text: 'Yes',\n        value: true,\n      },\n      {\n        text: 'No',\n        value: false,\n      },\n    ],\n    onFilter: (value, record) => record.isClaimed === value,\n  },\n  {\n    title: 'Total Conntribute',\n    dataIndex: 'totalContribute',\n    key: 'totalContribute',\n    align: 'center',\n  },\n];\n\nconst Component: React.FC<TypePros> = (props) => (\n  <Table\n    columns={columns}\n    dataSource={props.dataSource}\n    loading={props.loading}\n    pagination={{\n      defaultPageSize: 50,\n      showQuickJumper: true,\n      showLessItems: true,\n      total: props.dataSource.length,\n      showTotal: (total) => `Total Items: ${total}`,\n    }}\n    scroll={{ y: 'calc(100vh - 20rem)', x: 'max-content' }}\n  />\n);\n\nexport const NftTable = React.memo<TypePros>(Component);\n","import React from 'react';\n\ntype TypeProps = {\n  className?: string;\n  children?: React.ReactNode;\n};\n\nconst Layout: React.FC<TypeProps> = (props) => (\n  <div className={`container mx-auto h-screen relative pb-14 ${props.className}`}>{props.children}</div>\n);\n\nexport const PageLayout = React.memo<TypeProps>(Layout);\n","import React from 'react';\n\ntype TypeProps = {\n  className?: string;\n  children?: React.ReactNode;\n};\n\nconst Content: React.FC<TypeProps> = (props) => (\n  <div className={`pt-6 page-content-height ${props.className}`}>{props.children}</div>\n);\n\nexport const PageContent = React.memo<TypeProps>(Content);\n","import React from 'react';\n\nexport const PageFooter: React.FC = () => (\n  <div className=\"absolute top-auto bottom-0 h-12 w-full flex justify-center items-center space-x-3\">\n    <span>CopyrightÂ©2022</span>\n    <span>|</span>\n    <a href=\"https://github.com/darwinia-network/plo-rewards-export\" target=\"_blank\" rel=\"noopener noreferrer\">\n      Github\n    </a>\n    <span>|</span>\n    <a href=\"https://crab.network/plo_contribute\" target=\"_blank\" rel=\"noopener noreferrer\">\n      Crab PLO\n    </a>\n    <span>|</span>\n    <a href=\"https://darwinia.network/plo_contribute\" target=\"_blank\" rel=\"noopener noreferrer\">\n      Darwinia PLO\n    </a>\n  </div>\n);\n","import Big from 'big.js';\nimport { gql } from '@apollo/client';\n\nexport const CRAB_REWARD = 200000000;\nexport const CKTON_REWARD = 8000;\nexport const STAGE_REWARDS_RATE = 0.075; // 7.5%\nexport const MIN_KSM_REWARDS = new Big('0.00000001');\nexport const DOT_PRECISIONS = new Big('10000000000');\nexport const KSM_PRECISIONS = new Big('1000000000000');\nexport const CRAB_PRECISIONS = new Big('10000000000');\nexport const SUBSTRATE_PREFIX = 42;\n\nexport const GET_CONTRIBUTORS_POWER = gql`\n  query GetContributorsPower($first: Int!, $offset: Int!) {\n    crowdloanWhoStatistics(orderBy: TOTAL_BALANCE_DESC, first: $first, offset: $offset) {\n      totalCount\n      pageInfo {\n        hasNextPage\n      }\n      nodes {\n        user\n        totalPower\n        totalBalance\n      }\n    }\n  }\n`;\n\nexport const GET_REFERRALS_POWER = gql`\n  query GetReferralsPower($first: Int!, $offset: Int!) {\n    crowdloanReferStatistics(first: $first, offset: $offset) {\n      totalCount\n      pageInfo {\n        hasNextPage\n      }\n      nodes {\n        user\n        totalPower\n        totalBalance\n      }\n    }\n  }\n`;\n\nexport const GET_USERS_NFT_CLAIMED = gql`\n  query GetUserNftClaimed($first: Int!, $offset: Int!) {\n    remarkedNftAddresses(orderBy: [EXTRINSIC_TIMESTAMP_ASC], first: $first, offset: $offset) {\n      totalCount\n      pageInfo {\n        hasNextPage\n      }\n      nodes {\n        signer\n        addressValue\n        extrinsicHash\n      }\n    }\n  }\n`;\n","import React, { useEffect, useState, useMemo } from 'react';\nimport { combineLatest } from 'rxjs';\nimport genesisData from './genesis.json';\nimport { useApi } from '../../hook';\nimport { Table, Typography, Breadcrumb, Button, Statistic } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport { toShortAddress, dvmAddressToAccountId, convertToSS58, downloadCsv } from '../../utils';\nimport { SUBSTRATE_PREFIX, CRAB_PRECISIONS } from '../../config';\nimport Big from 'big.js';\nimport { PageLayout, PageContent, PageFooter } from '../../component';\nimport { useNavigate } from 'react-router-dom';\n\ntype ClaimState = [string, string][];\ntype UnclaimTableState = {\n  key: string;\n  snapshotAddress: string;\n  substrateAddress: string;\n  crabAmount: number;\n};\n\nconst columns: ColumnsType<UnclaimTableState> = [\n  {\n    key: 'snapshotAddress',\n    title: 'Snapshot Address',\n    dataIndex: 'snapshotAddress',\n    filters: [\n      {\n        text: 'ETH',\n        value: '0x',\n      },\n      {\n        text: 'TRON',\n        value: '41',\n      },\n    ],\n    onFilter: (value, record) => record.snapshotAddress.startsWith(value as string),\n    align: 'center',\n    render: (address) => <Typography.Text copyable={{ text: address }}>{toShortAddress(address)}</Typography.Text>,\n  },\n  {\n    key: 'substrateAddress',\n    title: 'Substrate Address',\n    dataIndex: 'substrateAddress',\n    align: 'center',\n    render: (address) => <Typography.Text copyable={{ text: address }}>{toShortAddress(address)}</Typography.Text>,\n  },\n  {\n    key: 'crabAmount',\n    title: 'Crab Amount',\n    dataIndex: 'crabAmount',\n    align: 'center',\n    render: (amount) => Big(amount).div(CRAB_PRECISIONS).toFixed(4),\n  },\n];\n\nconst Page = () => {\n  const { api } = useApi();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [ethClaimed, setEthClaimed] = useState<ClaimState>([]);\n  const [tronClaimed, setTronClaimed] = useState<ClaimState>([]);\n\n  const [totalClaimedAirdrop, setTotalClaimedAirdrop] = useState(Big(0));\n  const [totalUnclaimAirdrop, setTotalUnclaimAirdrop] = useState(Big(0));\n  const [genesisTotalAirdrop, setGenesisTotalAirdrop] = useState(Big(0));\n\n  useEffect(() => {\n    const total = Object.values(genesisData.dot)\n      .reduce((acc, cur) => acc.add(cur), Big(0))\n      .add(Object.values(genesisData.eth).reduce((acc, cur) => acc.add(cur), Big(0)))\n      .add(Object.values(genesisData.tron).reduce((acc, cur) => acc.add(cur), Big(0)));\n\n    setGenesisTotalAirdrop(total);\n  }, []);\n\n  useEffect(() => {\n    setLoading(true);\n\n    combineLatest(\n      [api.query.claims.claimsFromEth.entries(...[]), api.query.claims.claimsFromTron.entries(...[])],\n      (eth, tron) => [\n        eth.map((item) => [item[0].toHuman()?.toString(), item[1].toString()]),\n        tron.map((item) => [item[0].toHuman()?.toString(), item[1].toString()]),\n      ]\n    ).subscribe(([eth, tron]) => {\n      setEthClaimed(eth as ClaimState);\n      setTronClaimed(tron as ClaimState);\n\n      setLoading(false);\n    });\n  }, [api]);\n\n  const { dataSource, unclaimDot, unclaimEth, unclaimTron } = useMemo(() => {\n    let unclaimEth: string[] = [];\n    let unclaimDot: string[] = [];\n    let unclaimTron: string[] = [];\n    const dataSource: UnclaimTableState[] = [];\n\n    if (ethClaimed.length && tronClaimed.length) {\n      setLoading(true);\n\n      type dotKey = keyof typeof genesisData.dot;\n      type ethKey = keyof typeof genesisData.eth;\n      type tronKey = keyof typeof genesisData.tron;\n\n      unclaimDot = Object.keys(genesisData.dot).filter(\n        (address: string) =>\n          !ethClaimed.some(\n            ([addr, amount]) =>\n              addr.toLowerCase() === address.toLowerCase() && amount === genesisData.dot[address as dotKey].toString()\n          )\n      );\n      unclaimEth = Object.keys(genesisData.eth).filter(\n        (address: string) =>\n          !ethClaimed.some(\n            ([addr, amount]) =>\n              addr.toLowerCase() === address.toLowerCase() && amount === genesisData.eth[address as ethKey].toString()\n          )\n      );\n      unclaimTron = Object.keys(genesisData.tron).filter(\n        (address: string) =>\n          !tronClaimed.some(\n            ([addr, amount]) =>\n              addr.toLowerCase() === `0x${address.slice(2)}`.toLowerCase() &&\n              amount === genesisData.tron[address as tronKey].toString()\n          )\n      );\n\n      unclaimDot.forEach((item) => {\n        dataSource.push({\n          key: `dot-${item}`,\n          snapshotAddress: item,\n          substrateAddress: convertToSS58(dvmAddressToAccountId(item).toString(), SUBSTRATE_PREFIX),\n          crabAmount: genesisData.dot[item as dotKey],\n        });\n      });\n\n      unclaimEth.forEach((item) => {\n        dataSource.push({\n          key: `eth-${item}`,\n          snapshotAddress: item,\n          substrateAddress: convertToSS58(dvmAddressToAccountId(item).toString(), SUBSTRATE_PREFIX),\n          crabAmount: genesisData.eth[item as ethKey],\n        });\n      });\n\n      unclaimTron.forEach((item) => {\n        dataSource.push({\n          key: `tron-${item}`,\n          snapshotAddress: item,\n          substrateAddress: convertToSS58(dvmAddressToAccountId(`0x${item.slice(2)}`).toString(), SUBSTRATE_PREFIX),\n          crabAmount: genesisData.tron[item as tronKey],\n        });\n      });\n\n      // check testing\n      // {\n      //   ethClaimed.forEach((item) => {\n      //     const foundDot = Object.keys(genesisData.dot).find(address => address.toLowerCase() === item[0].toLowerCase());\n      //     const foundEth = Object.keys(genesisData.eth).find(address => address.toLowerCase() === item[0].toLowerCase());\n\n      //     if (foundDot && genesisData.dot[foundDot as dotKey].toString() !== item[1].toString()) {\n      //       console.log('dot', item[0], item[1], genesisData.dot[foundDot as dotKey]);\n      //     } else if (foundEth && genesisData.eth[foundEth as ethKey].toString() !== item[1].toString()) {\n      //       console.log('eth', item[0], item[1], genesisData.eth[foundEth as ethKey]);\n      //     } else if (!(foundDot || foundEth)) {\n      //       console.log('dot && eth unfound', item[0]);\n      //     }\n      //   });\n\n      //   tronClaimed.forEach((item) => {\n      //     const found = Object.keys(genesisData.tron).find(address => `0x${address.slice(2)}`.toLowerCase() === item[0].toLowerCase());\n      //     if (found && genesisData.tron[found as tronKey].toString() !== item[1].toString()) {\n      //       console.log('tron', item[0], item[1], genesisData.tron[found as tronKey]);\n      //     } else if (!found) {\n      //       console.log('tron unfound', item[0]);\n      //     }\n      //   });\n\n      //   ethClaimed.forEach((item) => {\n      //     if (item[0].toLowerCase() === '0xff7f274399c5040331a59e941b4971f31e15e47d'.toLowerCase()) {\n      //       console.log('amount:', item[1]);\n      //     }\n      //   });\n\n      //   dataSource.forEach(item => {\n      //     if ('0xff7f274399c5040331a59e941b4971f31e15e47d' === item.snapshotAddress) {\n      //       console.log('yes', item.crabAmount);\n      //     }\n      //   });\n      // }\n\n      setTotalClaimedAirdrop(\n        ethClaimed\n          .reduce((acc, cur) => acc.add(cur[1]), Big(0))\n          .add(tronClaimed.reduce((acc, cur) => acc.add(cur[1]), Big(0)))\n      );\n\n      setTotalUnclaimAirdrop(dataSource.reduce((acc, cur) => acc.add(cur.crabAmount), Big(0)));\n    }\n\n    setLoading(false);\n\n    return { dataSource, unclaimEth, unclaimDot, unclaimTron };\n  }, [ethClaimed, tronClaimed]);\n\n  const handleExport = () => {\n    downloadCsv(\n      ['å¿«ç§å°å, è½¬æ¢ä¸ºSubstrateå°å, æªé¢Crabæ°é']\n        .concat(\n          dataSource.map((item) => `${item.snapshotAddress}, ${item.substrateAddress}, ${item.crabAmount.toString()}`)\n        )\n        .join('\\n'),\n      'airdrop-unclaim.csv'\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageContent>\n        <div className=\"flex items-end justify-end space-x-2 mb-2\">\n          <div className=\"flex items-end space-x-6\">\n            <Statistic\n              loading={loading}\n              title=\"Total Genesis Addresses\"\n              value={\n                Object.keys(genesisData.dot).length +\n                Object.keys(genesisData.eth).length +\n                Object.keys(genesisData.tron).length\n              }\n            />\n            <Statistic\n              loading={loading}\n              title=\"Total Claimed Addresses\"\n              value={ethClaimed.length + tronClaimed.length}\n            />\n            <Statistic loading={loading} title=\"Total Unclaim Addresses\" value={dataSource.length} />\n            <Statistic\n              loading={loading}\n              title=\"Total Unclaim ETH Addresses\"\n              value={unclaimDot.length + unclaimEth.length}\n            />\n            <Statistic loading={loading} title=\"Total Unclaim TRON Addresses\" value={unclaimTron.length} />\n            <Statistic\n              loading={loading}\n              title=\"Total Claimed Airdrop (CRAB)\"\n              value={totalClaimedAirdrop.div(CRAB_PRECISIONS).toFixed(4)}\n            />\n            <Statistic\n              loading={loading}\n              title=\"Total Unclaim Airdrop (CRAB)\"\n              value={totalUnclaimAirdrop.div(CRAB_PRECISIONS).toFixed(4)}\n            />\n            <Statistic\n              loading={loading}\n              title=\"Total Genesis Airdrop (CRAB)\"\n              value={genesisTotalAirdrop.div(CRAB_PRECISIONS).toFixed(4)}\n            />\n          </div>\n          <div className=\"flex justify-end items-end space-x-2\">\n            <Button\n              className=\"rounded-md\"\n              onClick={handleExport}\n              loading={loading}\n              disabled={!dataSource.length}\n              type=\"primary\"\n            >\n              Export\n            </Button>\n          </div>\n        </div>\n        <Breadcrumb className=\"pl-px pb-1\">\n          <Breadcrumb.Item className=\"antd-breadcrumb-item\" onClick={() => navigate('/')}>\n            Home\n          </Breadcrumb.Item>\n          <Breadcrumb.Item>Airdrop</Breadcrumb.Item>\n        </Breadcrumb>\n        <Table\n          columns={columns}\n          dataSource={dataSource}\n          loading={loading}\n          scroll={{ y: 'calc(100vh - 20rem)', x: 'max-content' }}\n        />\n      </PageContent>\n      <PageFooter />\n    </PageLayout>\n  );\n};\n\nexport default React.memo(Page);\n","import { useContext } from 'react';\nimport { ApiContext, ApiCtx } from '../provider';\n\nexport const useApi = () => useContext(ApiContext) as Exclude<ApiCtx, undefined>;\n","export type TypeReferralsNode = {\n  user: string;\n  totalPower: string;\n  totalBalance: string;\n};\n\nexport type TypeContributorsNode = {\n  user: string;\n  totalPower: string;\n  totalBalance: string;\n};\n\nexport type TypeGetUserNftClaimedNode = {\n  signer: string;\n  addressValue: string;\n  extrinsicHash: string;\n};\n\nexport type TypeGetUsersNftClaimed = {\n  totalCount: number;\n  pageInfo: {\n    hasNextPage: boolean;\n  };\n  nodes: TypeGetUserNftClaimedNode[];\n};\n\nexport type TypeRewardsTableDataSource = {\n  key: number;\n  index: number;\n  address: string;\n  ksmAsContributor: string;\n  ksmAsReferral: string;\n  crabRewards: string;\n  cktonRewards: string;\n  stageCRabRewards: string;\n  stageCKtonRewards: string;\n};\n\nexport enum NftClaimNetworks {\n  CRAB,\n  DARWINIA,\n}\n\nexport type TypeNftTableDataSource = {\n  key: number;\n  index: number;\n  address: string;\n  totalContribute: string;\n  claimAddress: { address: string; extrinsicHash: string; network: NftClaimNetworks } | null;\n  isClaimed: boolean;\n};\n","import { decodeAddress, encodeAddress } from '@polkadot/keyring';\nimport { hexToU8a, u8aToHex, stringToU8a, numberToU8a, isNull } from '@polkadot/util';\nimport { TypeRegistry } from '@polkadot/types';\nimport type { Codec, DetectCodec } from '@polkadot/types/types';\nimport { Keyring } from '@polkadot/keyring';\nimport Big from 'big.js';\nimport { ethers } from 'ethers';\nimport { CRAB_REWARD, CKTON_REWARD, DOT_PRECISIONS, KSM_PRECISIONS, STAGE_REWARDS_RATE } from './config';\nimport type {\n  TypeGetUserNftClaimedNode,\n  TypeContributorsNode,\n  TypeReferralsNode,\n  TypeRewardsTableDataSource,\n  TypeNftTableDataSource,\n} from './type';\nimport { NftClaimNetworks } from './type';\n\nexport const toShortAddress = (address = '') => {\n  if (address.length && address.length > 12) {\n    return `${address.slice(0, 5)}...${address.slice(address.length - 5)}`;\n  }\n  return address;\n};\n\nexport const registry = new TypeRegistry();\n\nexport function dvmAddressToAccountId(address: string | null | undefined): DetectCodec<Codec, string> {\n  if (!address) {\n    return registry.createType('AccountId', '');\n  }\n\n  // eslint-disable-next-line no-magic-numbers\n  const data = new Uint8Array(32);\n\n  data.set(stringToU8a('dvm:'));\n  // eslint-disable-next-line no-magic-numbers\n  data.set(hexToU8a(address), 11);\n  // eslint-disable-next-line no-bitwise\n  const checksum = data.reduce((pre: number, current: number): number => pre ^ current);\n\n  // eslint-disable-next-line no-magic-numbers\n  data.set(numberToU8a(checksum), 31);\n  const accountId = registry.createType('AccountId', data);\n\n  return accountId;\n}\n\nexport function convertToSS58(text: string, prefix: number | null, isShort = false): string {\n  if (!text || isNull(prefix)) {\n    return '';\n  }\n\n  try {\n    let address = encodeAddress(text, prefix);\n\n    if (isShort) {\n      address = toShortAddress(address);\n    }\n\n    return address;\n  } catch (error) {\n    return '';\n  }\n}\n\nexport const polkadotAddressToPublicKey = (address: string) => u8aToHex(decodeAddress(address));\nexport const publicKeyToPolkadotAddress = (publicKey: string) => {\n  try {\n    const address = encodeAddress(hexToU8a(publicKey));\n    const keyring = new Keyring();\n    keyring.setSS58Format(2); // Kusama format address\n    return keyring.addFromAddress(address).address;\n  } catch (error) {\n    console.error(error);\n    return publicKey;\n  }\n};\n\nexport const downloadCsv = (data: string, filename = 'transferx.csv', type = 'data:text/csv;charset=utf-8') => {\n  const file = new Blob(['\\ufeff' + data], { type: type });\n  const url = URL.createObjectURL(file);\n\n  const a = document.createElement('a');\n  a.style.display = 'none';\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n\n  setTimeout(function () {\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }, 0);\n};\n\nexport const transformRewardsData = (nodesContributor: TypeContributorsNode[], nodesReferral: TypeReferralsNode[]) => {\n  let totalPower = Big(0);\n  let totalBalance = Big(0);\n  let totalStageCRab = Big(0);\n  let totalStageCKton = Big(0);\n  const csvRows: string[][] = [];\n  const rewardsTableDataSource: TypeRewardsTableDataSource[] = [];\n\n  nodesReferral.forEach((node) => {\n    totalPower = totalPower.add(node.totalPower);\n  });\n  nodesContributor.forEach((node) => {\n    totalPower = totalPower.add(node.totalPower);\n    totalBalance = totalBalance.add(node.totalBalance);\n  });\n\n  nodesContributor.forEach((nodeContributor) => {\n    const nodeReferral = nodesReferral.find((v) => v.user === polkadotAddressToPublicKey(nodeContributor.user));\n    const share = Big(nodeContributor.totalPower)\n      .add(nodeReferral ? nodeReferral.totalPower : 0)\n      .div(totalPower);\n\n    const crabRewards = share.times(CRAB_REWARD);\n    const cktonRewards = share.times(CKTON_REWARD);\n\n    const stageCRabReward = crabRewards.times(STAGE_REWARDS_RATE);\n    const stageCKtonReward = cktonRewards.times(STAGE_REWARDS_RATE);\n\n    totalStageCRab = totalStageCRab.add(stageCRabReward);\n    totalStageCKton = totalStageCKton.add(stageCKtonReward);\n\n    csvRows.push([nodeContributor.user, 'ring', stageCRabReward.toFixed(8), 'kusama']);\n    csvRows.push([nodeContributor.user, 'kton', stageCKtonReward.toFixed(8), 'kusama']);\n\n    rewardsTableDataSource.push({\n      key: rewardsTableDataSource.length,\n      index: rewardsTableDataSource.length + 1,\n      address: nodeContributor.user,\n      ksmAsContributor: Big(nodeContributor.totalBalance).div(KSM_PRECISIONS).toFixed(8),\n      ksmAsReferral: Big(nodeReferral ? nodeReferral.totalBalance : 0)\n        .div(KSM_PRECISIONS)\n        .toFixed(8),\n      crabRewards: crabRewards.toFixed(8),\n      cktonRewards: cktonRewards.toFixed(8),\n      stageCRabRewards: stageCRabReward.toFixed(8),\n      stageCKtonRewards: stageCKtonReward.toFixed(8),\n    });\n  });\n\n  nodesReferral.forEach((nodeReferral) => {\n    const address = publicKeyToPolkadotAddress(nodeReferral.user);\n    if (!rewardsTableDataSource.find((v) => v.address === address)) {\n      const share = Big(nodeReferral.totalPower).div(totalPower);\n\n      const crabRewards = share.times(CRAB_REWARD);\n      const cktonRewards = share.times(CKTON_REWARD);\n\n      const stageCRabReward = crabRewards.times(STAGE_REWARDS_RATE);\n      const stageCKtonReward = cktonRewards.times(STAGE_REWARDS_RATE);\n\n      totalStageCRab = totalStageCRab.add(stageCRabReward);\n      totalStageCKton = totalStageCKton.add(stageCKtonReward);\n\n      csvRows.push([address, 'ring', stageCRabReward.toFixed(8), 'kusama']);\n      csvRows.push([address, 'kton', stageCKtonReward.toFixed(8), 'kusama']);\n\n      rewardsTableDataSource.push({\n        key: rewardsTableDataSource.length,\n        index: rewardsTableDataSource.length + 1,\n        address: address,\n        ksmAsContributor: Big(0).toFixed(8),\n        ksmAsReferral: Big(nodeReferral.totalBalance).div(KSM_PRECISIONS).toFixed(8),\n        crabRewards: crabRewards.toFixed(8),\n        cktonRewards: cktonRewards.toFixed(8),\n        stageCRabRewards: stageCRabReward.toFixed(8),\n        stageCKtonRewards: stageCKtonReward.toFixed(8),\n      });\n    }\n  });\n\n  return {\n    totalPower: totalPower.toString(),\n    totalBalance: totalBalance.div(KSM_PRECISIONS).toFixed(8),\n    totalStageCRab: totalStageCRab.toFixed(0),\n    totalStageCKton: totalStageCKton.toFixed(0),\n    csvRows,\n    rewardsTableDataSource,\n  };\n};\n\nexport const transformNftsData = (data: string[][], nodes: TypeGetUserNftClaimedNode[], network: NftClaimNetworks) => {\n  const csvRowsTotal: string[][] = [];\n  const csvRowsClaimed: string[][] = [];\n  const csvRowsUnclaim: string[][] = [];\n  let nftTableDataSource: TypeNftTableDataSource[] = [];\n\n  const precision = network === NftClaimNetworks.CRAB ? KSM_PRECISIONS : DOT_PRECISIONS;\n\n  for (let value of data) {\n    const claim = nodes?.find((v) => v.signer === value[0]);\n    const contribute = Big(value[1]).div(precision).toFixed(8);\n    nftTableDataSource.push({\n      key: 0,\n      index: 0,\n      address: value[0],\n      totalContribute: contribute,\n      claimAddress: claim ? { address: claim.addressValue, extrinsicHash: claim.extrinsicHash, network } : null,\n      isClaimed: claim ? true : false,\n    });\n    csvRowsTotal.push([value[0], claim ? claim.addressValue : 'unclaim', contribute]);\n    claim && ethers.utils.isAddress(claim.addressValue)\n      ? csvRowsClaimed.push([value[0], claim.addressValue, contribute])\n      : csvRowsUnclaim.push([value[0], contribute]);\n  }\n\n  nftTableDataSource = nftTableDataSource.map((value, index) => ({\n    ...value,\n    key: index,\n    index: nftTableDataSource.length - index,\n  }));\n\n  return {\n    nftTableDataSource,\n    csvRowsTotal,\n    csvRowsClaimed,\n    csvRowsUnclaim,\n  };\n};\n"],"names":["columns","title","dataIndex","key","align","render","text","copyable","toShortAddress","className","address","type","ethers","target","href","network","NftClaimNetworks","extrinsicHash","bool","filters","value","onFilter","record","isClaimed","Component","props","dataSource","loading","pagination","defaultPageSize","showQuickJumper","showLessItems","total","length","showTotal","scroll","y","x","NftTable","React","Layout","children","PageLayout","Content","PageContent","PageFooter","rel","CRAB_REWARD","CKTON_REWARD","CRAB_PRECISIONS","Big","SUBSTRATE_PREFIX","GET_CONTRIBUTORS_POWER","gql","GET_REFERRALS_POWER","GET_USERS_NFT_CLAIMED","snapshotAddress","startsWith","amount","div","toFixed","Page","api","useContext","ApiContext","navigate","useNavigate","setLoading","useState","ethClaimed","setEthClaimed","tronClaimed","setTronClaimed","totalClaimedAirdrop","setTotalClaimedAirdrop","totalUnclaimAirdrop","setTotalUnclaimAirdrop","genesisTotalAirdrop","setGenesisTotalAirdrop","useEffect","Object","values","genesisData","reduce","acc","cur","add","combineLatest","query","claims","claimsFromEth","entries","claimsFromTron","eth","tron","map","item","toHuman","toString","subscribe","unclaimDot","unclaimEth","unclaimTron","useMemo","keys","filter","some","addr","toLowerCase","slice","forEach","push","substrateAddress","convertToSS58","dvmAddressToAccountId","crabAmount","onClick","downloadCsv","concat","join","disabled","registry","TypeRegistry","createType","data","Uint8Array","set","stringToU8a","hexToU8a","checksum","pre","current","numberToU8a","prefix","isShort","isNull","encodeAddress","error","filename","file","Blob","url","URL","createObjectURL","a","document","createElement","style","display","download","body","appendChild","click","setTimeout","removeChild","window","revokeObjectURL"],"sourceRoot":""}