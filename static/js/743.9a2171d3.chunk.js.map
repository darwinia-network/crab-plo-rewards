{"version":3,"file":"static/js/743.9a2171d3.chunk.js","mappings":"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","sources":["../node_modules/graphql/jsutils/invariant.mjs","../node_modules/graphql/language/location.mjs","../node_modules/graphql/language/printLocation.mjs","../node_modules/graphql/error/GraphQLError.mjs","../node_modules/graphql/jsutils/isObjectLike.mjs","../node_modules/graphql/error/syntaxError.mjs","../node_modules/graphql/language/directiveLocation.mjs","../node_modules/graphql/language/tokenKind.mjs","../node_modules/graphql/language/lexer.mjs","../node_modules/graphql/language/parser.mjs","../node_modules/graphql-tag/src/index.ts"],"sourcesContent":["export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n","import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n","import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n","import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedArgs(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorArgs` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedArgs(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n","/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n","import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, undefined, source, [\n    position,\n  ]);\n}\n","/**\n * The set of allowed directive location values.\n */\nexport let DirectiveLocation;\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport let TokenKind;\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    var _this$_options;\n\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (\n      ((_this$_options = this._options) === null || _this$_options === void 0\n        ? void 0\n        : _this$_options.allowLegacyFragmentVariables) === true\n    ) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    var _this$_options2;\n\n    if (\n      ((_this$_options2 = this._options) === null || _this$_options2 === void 0\n        ? void 0\n        : _this$_options2.noLocation) !== true\n    ) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n","import { parse } from 'graphql';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  Location,\n} from 'graphql/language/ast';\n\n// A map docString -> graphql document\nconst docCache = new Map<string, DocumentNode>();\n\n// A map fragmentName -> [normalized source]\nconst fragmentSourceMap = new Map<string, Set<string>>();\n\nlet printFragmentWarnings = true;\nlet experimentalFragmentVariables = false;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string: string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\nfunction cacheKeyFromLoc(loc: Location) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nfunction processFragments(ast: DocumentNode) {\n  const seenKeys = new Set<string>();\n  const definitions: DefinitionNode[] = [];\n\n  ast.definitions.forEach(fragmentDefinition => {\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc!);\n\n      // We know something about this fragment\n      let sourceKeySet = fragmentSourceMap.get(fragmentName)!;\n      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n      } else if (!sourceKeySet) {\n        fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n      }\n\n      sourceKeySet.add(sourceKey);\n\n      if (!seenKeys.has(sourceKey)) {\n        seenKeys.add(sourceKey);\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  });\n\n  return {\n    ...ast,\n    definitions,\n  };\n}\n\nfunction stripLoc(doc: DocumentNode) {\n  const workSet = new Set<Record<string, any>>(doc.definitions);\n\n  workSet.forEach(node => {\n    if (node.loc) delete node.loc;\n    Object.keys(node).forEach(key => {\n      const value = node[key];\n      if (value && typeof value === 'object') {\n        workSet.add(value);\n      }\n    });\n  });\n\n  const loc = doc.loc as Record<string, any>;\n  if (loc) {\n    delete loc.startToken;\n    delete loc.endToken;\n  }\n\n  return doc;\n}\n\nfunction parseDocument(source: string) {\n  var cacheKey = normalize(source);\n  if (!docCache.has(cacheKey)) {\n    const parsed = parse(source, {\n      experimentalFragmentVariables,\n      allowLegacyFragmentVariables: experimentalFragmentVariables,\n    } as any);\n    if (!parsed || parsed.kind !== 'Document') {\n      throw new Error('Not a valid GraphQL document.');\n    }\n    docCache.set(\n      cacheKey,\n      // check that all \"new\" fragments inside the documents are consistent with\n      // existing fragments of the same name\n      stripLoc(processFragments(parsed)),\n    );\n  }\n  return docCache.get(cacheKey)!;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nexport function gql(\n  literals: string | readonly string[],\n  ...args: any[]\n) {\n\n  if (typeof literals === 'string') {\n    literals = [literals];\n  }\n\n  let result = literals[0];\n\n  args.forEach((arg, i) => {\n    if (arg && arg.kind === 'Document') {\n      result += arg.loc.source.body;\n    } else {\n      result += arg;\n    }\n    result += literals[i + 1];\n  });\n\n  return parseDocument(result);\n}\n\nexport function resetCaches() {\n  docCache.clear();\n  fragmentSourceMap.clear();\n}\n\nexport function disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nexport function enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nexport function disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\nconst extras = {\n  gql,\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables,\n};\n\nexport namespace gql {\n  export const {\n    gql,\n    resetCaches,\n    disableFragmentWarnings,\n    enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables,\n  } = extras;\n}\n\ngql.default = gql;\n\nexport default gql;\n"],"names":["invariant","condition","message","Boolean","Error","LineRegExp","getLocation","source","position","lastLineStart","line","match","body","matchAll","index","length","column","printSourceLocation","sourceLocation","firstLineColumnOffset","locationOffset","padStart","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","name","lines","split","locationLine","subLineIndex","Math","floor","subLineColumnNum","subLines","i","push","slice","printPrefixedLines","map","subLine","existingLines","filter","_","undefined","padLen","max","prefix","join","GraphQLError","constructor","_this$nodes","_nodeLocations$","_ref","rawArgs","nodes","positions","path","originalError","extensions","args","firstArg","toNormalizedArgs","super","this","undefinedIfEmpty","Array","isArray","nodeLocations","node","loc","start","locations","pos","originalExtensions","value","Object","create","defineProperties","writable","enumerable","stack","defineProperty","configurable","captureStackTrace","toStringTag","Symbol","toString","output","location","toJSON","formattedError","keys","array","syntaxError","description","DirectiveLocation","TokenKind","Lexer","startOfFileToken","Token","lastToken","token","lineStart","advance","lookahead","kind","next","nextToken","readNextToken","end","prev","isUnicodeScalarValue","code","isSupplementaryCodePoint","isLeadingSurrogate","charCodeAt","isTrailingSurrogate","printCodePointAt","lexer","codePointAt","char","String","fromCodePoint","toUpperCase","createToken","col","bodyLength","readComment","readBlockString","readString","isDigit","readNumber","isNameStart","readName","firstCode","isFloat","readDigits","chunkStart","escape","readEscapedUnicodeVariableWidth","readEscapedUnicodeFixedWidth","readEscapedCharacter","size","point","readHexDigit","read16BitHexCode","trailingCode","currentLine","blockLines","dedentBlockStringLines","isNameContinue","Parser","options","sourceObj","isSource","Source","_lexer","_options","parseName","expectToken","Kind","parseDocument","definitions","many","parseDefinition","peek","parseOperationDefinition","hasDescription","peekDescription","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseFragmentDefinition","parseTypeSystemExtension","unexpected","operation","OperationTypeNode","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","variable","parseVariable","type","parseTypeReference","defaultValue","expectOptionalToken","parseConstValueLiteral","parseConstDirectives","selections","parseSelection","parseFragment","parseField","nameOrAlias","alias","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","parseValueLiteral","hasTypeCondition","expectOptionalKeyword","parseFragmentName","typeCondition","parseNamedType","_this$_options","expectKeyword","allowLegacyFragmentVariables","parseList","parseObject","parseStringLiteral","varName","block","values","any","fields","parseObjectField","parseDirective","innerType","parseDescription","operationTypes","parseOperationTypeDefinition","interfaces","parseImplementsInterfaces","parseFieldsDefinition","delimitedMany","parseFieldDefinition","parseArgumentDefs","parseInputValueDef","types","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseEnumValueName","getTokenDesc","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","repeatable","parseDirectiveLocations","parseDirectiveLocation","prototype","hasOwnProperty","call","startToken","_this$_options2","noLocation","Location","getTokenKindDesc","atToken","openKind","parseFn","closeKind","delimiterKind","isPunctuatorTokenKind","docCache","Map","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","normalize","string","replace","trim","processFragments","ast","seenKeys","Set","forEach","fragmentDefinition","fragmentName","sourceKey","substring","sourceKeySet","get","has","console","warn","set","add","cacheKey","parsed","parse","doc","workSet","key","endToken","stripLoc","gql","literals","result","arg","gql_1","extras","clear"],"sourceRoot":""}