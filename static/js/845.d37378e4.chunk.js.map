{"version":3,"file":"static/js/845.d37378e4.chunk.js","mappings":"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","sources":["component/PageLayout.tsx","component/PageContent.tsx","component/PageFooter.tsx","config.ts","../node_modules/@apollo/src/react/parser/index.ts","../node_modules/@apollo/src/react/hooks/useQuery.ts","page/rewards/RewardsTable.tsx","page/rewards/index.tsx","utils.ts"],"sourcesContent":["import React from 'react';\n\ntype TypeProps = {\n  className?: string;\n  children?: React.ReactNode;\n};\n\nconst Layout: React.FC<TypeProps> = (props) => (\n  <div className={`container mx-auto h-screen relative pb-14 ${props.className}`}>\n    {props.children}\n  </div>\n);\n\nexport const PageLayout = React.memo<TypeProps>(Layout);\n","import React from 'react';\n\ntype TypeProps = {\n  className?: string;\n  children?: React.ReactNode;\n};\n\nconst Content: React.FC<TypeProps> = (props) => (\n  <div className={`pt-10 page-content-height ${props.className}`}>\n    {props.children}\n  </div>\n);\n\nexport const PageContent = React.memo<TypeProps>(Content);\n","import React from 'react';\n\nexport const PageFooter: React.FC = () => (\n  <div className='absolute top-auto bottom-0 h-20 w-full flex justify-center items-center space-x-3'>\n    <span>Copyright©2022</span>\n    <span>|</span>\n    <a href='https://github.com/darwinia-network/crab-plo-rewards' target='_blank' rel='noopener noreferrer'>Github</a>\n    <span>|</span>\n    <a href='https://crab.network/plo_contribute' target='_blank' rel='noopener noreferrer'>PLO</a>\n  </div>\n);\n","import Big from 'big.js';\nimport { gql } from \"@apollo/client\";\n\nexport const CRAB_REWARD = 200000000;\nexport const CKTON_REWARD = 8000;\n\nexport const KSM_PRECISIONS = new Big(\"1000000000000\");\n\n// Power: 7099040920573355\n// Balance: 7553777745215274 => 7,553.777745215274 KSM\nexport const GLOBAL_TOTAL_CONTRIBUTE_POWER = new Big(\"7099040920573355\");\n\nexport const GET_USERS_CONTRIBUTE_POWER = gql`\n  query GetUsersContributePower($first: Int!, $offset: Int!) {\n    crowdloanWhoStatistics(orderBy: TOTAL_BALANCE_DESC, first: $first, offset: $offset) {\n      totalCount\n      pageInfo{\n        hasNextPage\n      }\n      nodes {\n        user\n        totalPower\n        contributors {\n          nodes {\n            powerRefer\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_USERS_NFT_CLAIMED = gql`\n  query GetUserNftClaimed($first: Int!, $offset: Int!) {\n    remarkedNftAddresses(orderBy: [EXTRINSIC_TIMESTAMP_ASC], first: $first, offset: $offset) {\n      totalCount\n      pageInfo {\n        hasNextPage\n      }\n      nodes {\n        signer\n        addressValue\n        extrinsicHash\n      }\n    }\n  }\n`;\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { equal } from '@wry/equality';\nimport { OperationVariables, mergeOptions } from '../../core';\nimport { getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n): QueryResult<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const client = useApolloClient(options?.client);\n  const defaultWatchQueryOptions = client.defaultOptions.watchQuery;\n  verifyDocumentType(query, DocumentType.Query);\n  const [obsQuery, setObsQuery] = useState(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    let obsQuery: ObservableQuery<TData, TVariables> | null = null;\n    if (context.renderPromises) {\n      obsQuery = context.renderPromises.getSSRObservable(watchQueryOptions);\n    }\n\n    if (!obsQuery) {\n      // Is it safe (StrictMode/memory-wise) to call client.watchQuery here?\n      obsQuery = client.watchQuery(watchQueryOptions);\n      if (context.renderPromises) {\n        context.renderPromises.registerSSRObservable(\n          obsQuery,\n          watchQueryOptions,\n        );\n      }\n    }\n\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      obsQuery.getCurrentResult().loading\n    ) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      context.renderPromises.addQueryPromise(\n        {\n          // The only options which seem to actually be used by the\n          // RenderPromises class are query and variables.\n          getOptions: () => createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n          fetchData: () => new Promise<void>((resolve) => {\n            const sub = obsQuery!.subscribe({\n              next(result) {\n                if (!result.loading) {\n                  resolve()\n                  sub.unsubscribe();\n                }\n              },\n              error() {\n                resolve();\n                sub.unsubscribe();\n              },\n              complete() {\n                resolve();\n              },\n            });\n          }),\n        },\n        // This callback never seemed to do anything\n        () => null,\n      );\n    }\n\n    return obsQuery;\n  });\n\n  let [result, setResult] = useState(() => {\n    const result = obsQuery.getCurrentResult();\n    if (!result.loading && options) {\n      if (result.error) {\n        options.onError?.(result.error);\n      } else if (result.data) {\n        options.onCompleted?.(result.data);\n      }\n    }\n\n    return result;\n  });\n\n  const ref = useRef({\n    client,\n    query,\n    options,\n    result,\n    previousData: void 0 as TData | undefined,\n    watchQueryOptions: createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n  });\n\n  // An effect to recreate the obsQuery whenever the client or query changes.\n  // This effect is also responsible for checking and updating the obsQuery\n  // options whenever they change.\n  useEffect(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    let nextResult: ApolloQueryResult<TData> | undefined;\n    if (ref.current.client !== client || !equal(ref.current.query, query)) {\n      const obsQuery = client.watchQuery(watchQueryOptions);\n      setObsQuery(obsQuery);\n      nextResult = obsQuery.getCurrentResult();\n    } else if (!equal(ref.current.watchQueryOptions, watchQueryOptions)) {\n      obsQuery.setOptions(watchQueryOptions).catch(() => {});\n      nextResult = obsQuery.getCurrentResult();\n      ref.current.watchQueryOptions = watchQueryOptions;\n    }\n\n    if (nextResult) {\n      const previousResult = ref.current.result;\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = nextResult);\n      if (!nextResult.loading && options) {\n        if (nextResult.error) {\n          options.onError?.(nextResult.error);\n        } else if (nextResult.data) {\n          options.onCompleted?.(nextResult.data);\n        }\n      }\n    }\n\n    Object.assign(ref.current, { client, query });\n  }, [obsQuery, client, query, options]);\n\n  // An effect to subscribe to the current observable query\n  useEffect(() => {\n    if (context.renderPromises) {\n      return;\n    }\n\n    let subscription = obsQuery.subscribe(onNext, onError);\n    // We use `getCurrentResult()` instead of the callback argument because\n    // the values differ slightly. Specifically, loading results will have\n    // an empty object for data instead of `undefined` for some reason.\n    function onNext() {\n      const previousResult = ref.current.result;\n      const result = obsQuery.getCurrentResult();\n      // Make sure we're not attempting to re-render similar results\n      if (\n        previousResult &&\n        previousResult.loading === result.loading &&\n        previousResult.networkStatus === result.networkStatus &&\n        equal(previousResult.data, result.data)\n      ) {\n        return;\n      }\n\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = result);\n      if (!result.loading) {\n        ref.current.options?.onCompleted?.(result.data);\n      }\n    }\n\n    function onError(error: Error) {\n      const last = obsQuery[\"last\"];\n      subscription.unsubscribe();\n      // Unfortunately, if `lastError` is set in the current\n      // `observableQuery` when the subscription is re-created,\n      // the subscription will immediately receive the error, which will\n      // cause it to terminate again. To avoid this, we first clear\n      // the last error/result from the `observableQuery` before re-starting\n      // the subscription, and restore it afterwards (so the subscription\n      // has a chance to stay open).\n      try {\n        obsQuery.resetLastResults();\n        subscription = obsQuery.subscribe(onNext, onError);\n      } finally {\n        obsQuery[\"last\"] = last;\n      }\n\n      if (!error.hasOwnProperty('graphQLErrors')) {\n        // The error is not a GraphQL error\n        throw error;\n      }\n\n      const previousResult = ref.current.result;\n      if (\n        (previousResult && previousResult.loading) ||\n        !equal(error, previousResult.error)\n      ) {\n        setResult(ref.current.result = {\n          data: previousResult.data,\n          error: error as ApolloError,\n          loading: false,\n          networkStatus: NetworkStatus.error,\n        });\n        ref.current.options?.onError?.(error as ApolloError);\n      }\n    }\n\n    return () => subscription.unsubscribe();\n  }, [obsQuery, context.renderPromises, client.disableNetworkFetches]);\n\n  let partial: boolean | undefined;\n  ({ partial, ...result } = result);\n\n  {\n    // BAD BOY CODE BLOCK WHERE WE PUT SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      partial &&\n      options?.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      obsQuery.options.fetchPolicy !== 'cache-only'\n    ) {\n      result = {\n        ...result,\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      };\n\n      obsQuery.refetch();\n    }\n\n    // TODO: This is a hack to make sure useLazyQuery executions update the\n    // obsevable query options for ssr.\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      result.loading\n    ) {\n      obsQuery.setOptions(createWatchQueryOptions(query, options, defaultWatchQueryOptions)).catch(() => {});\n    }\n\n    // We assign options during rendering as a guard to make sure that\n    // callbacks like onCompleted and onError are not stale.\n    Object.assign(ref.current, { options });\n  }\n\n  if (\n    (context.renderPromises || client.disableNetworkFetches) &&\n    options?.ssr === false\n  ) {\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    result = ref.current.result = {\n      loading: true,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.loading,\n    };\n  } else if (options?.skip || options?.fetchPolicy === 'standby') {\n    // When skipping a query (ie. we're not querying for data but still want to\n    // render children), make sure the `data` is cleared out and `loading` is\n    // set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate that\n    // previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n    // to address this.\n    result = {\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.ready,\n    };\n  }\n\n  if (result.errors && result.errors.length) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    result = {\n      ...result,\n      error: result.error || new ApolloError({ graphQLErrors: result.errors }),\n    };\n  }\n\n  const obsQueryFields = useMemo(() => ({\n    refetch: obsQuery.refetch.bind(obsQuery),\n    fetchMore: obsQuery.fetchMore.bind(obsQuery),\n    updateQuery: obsQuery.updateQuery.bind(obsQuery),\n    startPolling: obsQuery.startPolling.bind(obsQuery),\n    stopPolling: obsQuery.stopPolling.bind(obsQuery),\n    subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n  }), [obsQuery]);\n\n  return {\n    ...obsQueryFields,\n    variables: createWatchQueryOptions(query, options, defaultWatchQueryOptions).variables,\n    client,\n    called: true,\n    previousData: ref.current.previousData,\n    ...result,\n  };\n}\n\n/**\n * A function to massage options before passing them the ObservableQuery.\n */\nfunction createWatchQueryOptions<TData, TVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = {},\n  defaultOptions?: Partial<WatchQueryOptions<any, any>>\n): WatchQueryOptions<TVariables, TData> {\n  // TODO: For some reason, we pass context, which is the React Apollo Context,\n  // into observable queries, and test for that.\n  // removing hook specific options\n  const {\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    ...otherOptions\n  } = options;\n\n  let watchQueryOptions = { query, ...otherOptions };\n  if (defaultOptions) {\n    watchQueryOptions = mergeOptions(defaultOptions, watchQueryOptions);\n  }\n\n  if (skip) {\n    watchQueryOptions.fetchPolicy = 'standby';\n  } else if (\n    watchQueryOptions.context?.renderPromises &&\n    (\n      watchQueryOptions.fetchPolicy === 'network-only' ||\n      watchQueryOptions.fetchPolicy === 'cache-and-network'\n    )\n  ) {\n    // this behavior was added to react-apollo without explanation in this PR\n    // https://github.com/apollographql/react-apollo/pull/1579\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  } else if (!watchQueryOptions.fetchPolicy) {\n    // cache-first is the default policy, but we explicitly assign it here so\n    // the cache policies computed based on options can be cleared\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  }\n\n  if (!watchQueryOptions.variables) {\n    watchQueryOptions.variables = {} as TVariables;\n  }\n\n  return watchQueryOptions;\n}\n","import React from 'react';\nimport { Table, Typography } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport { shortAddress } from '../../utils';\nimport type { TypeRewardsTableDataSource } from '../../type';\n\ntype TypePros = {\n  loading: boolean;\n  dataSource: TypeRewardsTableDataSource[];\n}\n\nconst columns: ColumnsType<TypeRewardsTableDataSource> = [\n  {\n    title: 'Index',\n    dataIndex: 'index',\n    key: 'index',\n    align: 'center',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n    align: 'center',\n    render: (text: string) => (\n      <Typography.Text copyable={{ text: text }}>{shortAddress(text)}</Typography.Text>\n    )\n  },\n  {\n    title: 'Current CRAB Rewards',\n    dataIndex: 'currentCRabRewards',\n    key: 'currentCRabRewards',\n    align: 'right',\n  },\n  {\n    title: 'Stage CRAB Rewards',\n    dataIndex: 'stageCRabRewards',\n    key: 'stageCRabRewards',\n    align: 'right',\n  },\n  {\n    title: 'Current CKTON Rewards',\n    dataIndex: 'currentCKtonRewards',\n    key: 'currentCKtonRewards',\n    align: 'right',\n  },\n  {\n    title: 'Stage CKTON Rewards',\n    dataIndex: 'stageCKtonRewards',\n    key: 'stageCKtonRewards',\n    align: 'right',\n  },\n];\n\nconst Component: React.FC<TypePros> = (props) => {\n  const { dataSource, loading } = props;\n  return (\n    <Table columns={columns} dataSource={dataSource} loading={loading} pagination={false} scroll={{ y: 'calc(100vh - 20rem)', x: 'max-content' }} />\n  );\n};\n\nexport const RewardsTable = React.memo<TypePros>(Component);\n","import React from 'react';\nimport { Button, Statistic, Breadcrumb } from 'antd';\nimport { useQuery } from \"@apollo/client\";\nimport { RewardsTable } from './RewardsTable';\nimport { PageLayout, PageContent, PageFooter } from '../../component';\nimport { downloadCsv, transformRewardsData } from '../../utils';\nimport { GET_USERS_CONTRIBUTE_POWER } from '../../config';\nimport { useNavigate } from 'react-router-dom';\n\nconst Page: React.FC = () => {\n  const navigate = useNavigate();\n  const { loading, error, data, refetch } = useQuery(GET_USERS_CONTRIBUTE_POWER, {\n    variables: {\n      first: 10,\n      offset: 0,\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  if (error) {\n    console.error(error);\n    return <p>Oops, something went wrong ~</p>;\n  }\n  const {\n    csvRows, rewardsTableDataSource,\n    totalCurrentCRab, totalCurrentCKton,\n    totalStageCRab, totalStageCKTON\n  } = transformRewardsData(data?.crowdloanWhoStatistics?.nodes || []);\n\n  const handleClickFetchAll = () => {\n    refetch({ first: 0, offset: 0 });\n  }\n\n  const handleClickDownload = () => {\n    downloadCsv(csvRows.map(e => e.join(\",\")).join(\"\\n\"));\n  }\n\n  return (\n    <PageLayout>\n      <PageContent>\n        <div className='flex items-end justify-end space-x-24 mb-2'>\n          <div className='flex items-center space-x-6'>\n            <Statistic loading={loading} title=\"Total Current CRAB\" value={totalCurrentCRab.toFixed(8)} />\n            <Statistic loading={loading} title=\"Total Current CKTON\" value={totalCurrentCKton.toFixed(8)} />\n            <Statistic loading={loading} title=\"Total Stage CRAB\" value={totalStageCRab.toFixed(8)} />\n            <Statistic loading={loading} title=\"Total Stage CKTON\" value={totalStageCKTON.toFixed(8)} />\n          </div>\n\n          <div className='flex justify-end items-end space-x-2'>\n            <Button className='rounded-md' onClick={handleClickFetchAll} disabled={data?.crowdloanWhoStatistics?.pageInfo?.hasNextPage === false} loading={loading} type='primary'>\n              Fetch All ({data?.crowdloanWhoStatistics?.nodes.length || 0}/{data?.crowdloanWhoStatistics?.totalCount || 0})\n            </Button>\n            <Button className='rounded-md' onClick={handleClickDownload} disabled={csvRows.length === 0} loading={loading}>Download CSV</Button>\n          </div>\n        </div>\n\n        <Breadcrumb className='pl-px pb-1'>\n          <Breadcrumb.Item className='antd-breadcrumb-item' onClick={() => navigate('/')}>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>Rewards</Breadcrumb.Item>\n        </Breadcrumb>\n\n        <RewardsTable\n          loading={loading}\n          dataSource={rewardsTableDataSource}\n        />\n      </PageContent>\n\n      <PageFooter />\n    </PageLayout>\n  );\n};\n\nexport default React.memo(Page);\n","import Big from 'big.js';\nimport { ethers } from 'ethers';\nimport { CRAB_REWARD, CKTON_REWARD, GLOBAL_TOTAL_CONTRIBUTE_POWER, KSM_PRECISIONS } from './config';\nimport type { TypeGetUsersContributePowerNode, TypeGetUserNftClaimedNode, TypeRewardsTableDataSource, TypeNftTableDataSource } from './type';\n\nexport const shortAddress = (address = \"\") => {\n  if (address.length && address.length > 12) {\n    return `${address.slice(0, 5)}...${address.slice(address.length - 5)}`;\n  }\n  return address;\n};\n\nexport const downloadCsv = (data: string, filename = 'transferx.csv', type = 'data:text/csv;charset=utf-8') => {\n  const file = new Blob([\"\\ufeff\" + data], { type: type });\n  const url = URL.createObjectURL(file);\n\n  const a = document.createElement(\"a\");\n  a.style.display = 'none';\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n\n  setTimeout(function() {\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }, 0);\n};\n\nexport const transformRewardsData = (nodes: TypeGetUsersContributePowerNode[]) => {\n  let totalCurrentCRab = Big(0);\n  let totalCurrentCKton = Big(0);\n  let totalStageCRab = Big(0);\n  let totalStageCKTON = Big(0);\n  const csvRows: string[][] = [];\n  const rewardsTableDataSource: TypeRewardsTableDataSource[] = [];\n\n  nodes?.forEach((value: TypeGetUsersContributePowerNode, index: number) => {\n    const referPower = value.contributors.nodes.reduce((previous, current) => Big(previous).add(current.powerRefer).toString(), '0');\n    const share = Big(value.totalPower).add(referPower).div(GLOBAL_TOTAL_CONTRIBUTE_POWER);\n    const currentCRabReward = share.times(CRAB_REWARD);\n    const currentCKtonReward = share.times(CKTON_REWARD);\n    const stageCRabReward = currentCRabReward.times(0.1);\n    const stageCKtonReward = currentCKtonReward.times(0.1);\n\n    totalCurrentCRab = totalCurrentCRab.add(currentCRabReward);\n    totalCurrentCKton = totalCurrentCKton.add(currentCKtonReward);\n    totalStageCRab = totalStageCRab.add(stageCRabReward);\n    totalStageCKTON = totalStageCKTON.add(stageCKtonReward);\n\n    csvRows.push([value.user, 'ring', stageCRabReward.toFixed(8), 'kusama']);\n    csvRows.push([value.user, 'kton', stageCKtonReward.toFixed(8), 'kusama']);\n\n    rewardsTableDataSource.push({\n      key: index,\n      index: nodes?.length - index,\n      address: value.user,\n      currentCRabRewards: currentCRabReward.toFixed(8),\n      stageCRabRewards: stageCRabReward.toFixed(8),\n      currentCKtonRewards: currentCKtonReward.toFixed(8),\n      stageCKtonRewards: stageCKtonReward.toFixed(8),\n    });\n  });\n\n  return {\n    csvRows, rewardsTableDataSource,\n    totalCurrentCRab, totalCurrentCKton,\n    totalStageCRab, totalStageCKTON,\n  };\n};\n\nexport const transformNftsData = (data: string[][], nodes: TypeGetUserNftClaimedNode[]) => {\n  const csvRows: string[] = [];\n  let nftTableDataSource: TypeNftTableDataSource[] = [];\n\n  for (let value of data) {\n    const claim = nodes?.find(v => v.signer === value[0]);\n    nftTableDataSource.push({\n      key: 0,\n      index: 0,\n      address: value[0],\n      ksmContribute: Big(value[1]).div(KSM_PRECISIONS).toFixed(8),\n      claimAddress: claim ? { address: claim.addressValue, extrinsicHash: claim.extrinsicHash } : null,\n      isClaimed: claim ? true :false,\n    });\n    claim && ethers.utils.isAddress(claim.addressValue) && csvRows.push(claim.addressValue);\n  }\n\n  nftTableDataSource = nftTableDataSource.map((value, index) => ({\n    ...value,\n    key: index,\n    index: nftTableDataSource.length - index,\n  }));\n\n  return {\n    csvRows, nftTableDataSource,\n  };\n};\n\n"],"names":["Layout","props","className","children","PageLayout","React","Content","PageContent","PageFooter","href","target","rel","CRAB_REWARD","CKTON_REWARD","KSM_PRECISIONS","Big","GLOBAL_TOTAL_CONTRIBUTE_POWER","GET_USERS_CONTRIBUTE_POWER","gql","GET_USERS_NFT_CLAIMED","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","verifyDocumentType","document","operation","variables","cached","get","__DEV__","invariant","concat","fragments","definitions","filter","x","kind","queries","mutations","subscriptions","length","definition","variableDefinitions","payload","requiredOperationName","createWatchQueryOptions","query","options","defaultOptions","skip","otherOptions","watchQueryOptions","mergeOptions","fetchPolicy","context","_a","renderPromises","columns","title","dataIndex","key","align","render","text","copyable","shortAddress","Component","dataSource","loading","pagination","scroll","y","RewardsTable","Page","navigate","useNavigate","useContext","getApolloContext","client","useApolloClient","defaultWatchQueryOptions","watchQuery","partial","useState","obsQuery","getSSRObservable","registerSSRObservable","ssr","getCurrentResult","addQueryPromise","getOptions","fetchData","Promise","resolve","sub","subscribe","next","result","unsubscribe","error","complete","setObsQuery","onError","data","onCompleted","_b","setResult","ref","useRef","previousData","useEffect","nextResult","current","equal","setOptions","catch","obsQuery_1","previousResult","Object","assign","subscription","onNext","last","resetLastResults","hasOwnProperty","networkStatus","NetworkStatus","disableNetworkFetches","partialRefetch","keys","refetch","errors","ApolloError","graphQLErrors","obsQueryFields","useMemo","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","called","useQuery","first","offset","notifyOnNetworkStatusChange","console","transformRewardsData","crowdloanWhoStatistics","nodes","csvRows","rewardsTableDataSource","totalCurrentCRab","totalCurrentCKton","totalStageCRab","totalStageCKTON","value","toFixed","onClick","disabled","pageInfo","hasNextPage","totalCount","downloadCsv","map","e","join","address","slice","filename","file","Blob","url","URL","createObjectURL","a","createElement","style","display","download","body","appendChild","click","setTimeout","removeChild","window","revokeObjectURL","forEach","index","referPower","contributors","reduce","previous","add","powerRefer","toString","share","totalPower","div","currentCRabReward","times","currentCKtonReward","stageCRabReward","stageCKtonReward","push","user","currentCRabRewards","stageCRabRewards","currentCKtonRewards","stageCKtonRewards","transformNftsData","nftTableDataSource","claim","find","v","signer","ksmContribute","claimAddress","addressValue","extrinsicHash","isClaimed","ethers"],"sourceRoot":""}