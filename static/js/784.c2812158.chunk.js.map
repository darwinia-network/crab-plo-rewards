{"version":3,"file":"static/js/784.c2812158.chunk.js","mappings":"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","sources":["component/NftTable.tsx","component/PageLayout.tsx","component/PageContent.tsx","component/PageFooter.tsx","config.ts","../node_modules/@ant-design/icons-svg/es/asn/QuestionCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/QuestionCircleOutlined.js","page/crab-rewards/RewardsTable.tsx","page/crab-rewards/index.tsx","type.ts","utils.ts"],"sourcesContent":["import React from 'react';\nimport { Table, Typography } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport { shortAddress } from '../utils';\nimport { NftClaimNetworks } from '../type';\nimport type { TypeNftTableDataSource } from '../type';\nimport { ethers } from 'ethers';\n\ntype TypePros = {\n  loading: boolean;\n  dataSource: TypeNftTableDataSource[];\n};\n\nconst columns: ColumnsType<TypeNftTableDataSource> = [\n  {\n    title: 'Index',\n    dataIndex: 'index',\n    key: 'index',\n    align: 'center',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n    align: 'center',\n    render: (text: string) => <Typography.Text copyable={{ text: text }}>{shortAddress(text)}</Typography.Text>,\n  },\n  {\n    title: 'Claim Address',\n    dataIndex: 'claimAddress',\n    key: 'claimAddress',\n    align: 'center',\n    render: (text: { address: string; extrinsicHash: string; network: NftClaimNetworks } | null) =>\n      text ? (\n        <div className=\"inline-flex space-x-1\">\n          <Typography.Text\n            copyable={{ text: text.address }}\n            type={ethers.utils.isAddress(text.address) ? 'success' : 'danger'}\n          >\n            {shortAddress(text.address)}\n          </Typography.Text>\n          <span>Â·</span>\n          <Typography.Link\n            target={'_blank'}\n            href={`${\n              text.network === NftClaimNetworks.CRAB\n                ? 'https://kusama.subscan.io/extrinsic/'\n                : 'https://polkadot.subscan.io/extrinsic/'\n            }${text.extrinsicHash}`}\n          >\n            extrinsic\n          </Typography.Link>\n        </div>\n      ) : (\n        <Typography.Text>None</Typography.Text>\n      ),\n  },\n  {\n    title: 'Is Claimed',\n    dataIndex: 'isClaimed',\n    key: 'isClaimed',\n    align: 'center',\n    render: (bool: boolean) => (\n      <Typography.Text type={bool ? 'success' : 'secondary'}>{bool ? 'Yes' : 'No'}</Typography.Text>\n    ),\n    filters: [\n      {\n        text: 'Yes',\n        value: true,\n      },\n      {\n        text: 'No',\n        value: false,\n      },\n    ],\n    onFilter: (value, record) => record.isClaimed === value,\n  },\n  {\n    title: 'Total Conntribute',\n    dataIndex: 'totalContribute',\n    key: 'totalContribute',\n    align: 'center',\n  },\n];\n\nconst Component: React.FC<TypePros> = (props) => (\n  <Table\n    columns={columns}\n    dataSource={props.dataSource}\n    loading={props.loading}\n    pagination={{\n      defaultPageSize: 50,\n      showQuickJumper: true,\n      showLessItems: true,\n      total: props.dataSource.length,\n      showTotal: (total) => `Total Items: ${total}`,\n    }}\n    scroll={{ y: 'calc(100vh - 20rem)', x: 'max-content' }}\n  />\n);\n\nexport const NftTable = React.memo<TypePros>(Component);\n","import React from 'react';\n\ntype TypeProps = {\n  className?: string;\n  children?: React.ReactNode;\n};\n\nconst Layout: React.FC<TypeProps> = (props) => (\n  <div className={`container mx-auto h-screen relative pb-14 ${props.className}`}>{props.children}</div>\n);\n\nexport const PageLayout = React.memo<TypeProps>(Layout);\n","import React from 'react';\n\ntype TypeProps = {\n  className?: string;\n  children?: React.ReactNode;\n};\n\nconst Content: React.FC<TypeProps> = (props) => (\n  <div className={`pt-6 page-content-height ${props.className}`}>{props.children}</div>\n);\n\nexport const PageContent = React.memo<TypeProps>(Content);\n","import React from 'react';\n\nexport const PageFooter: React.FC = () => (\n  <div className=\"absolute top-auto bottom-0 h-12 w-full flex justify-center items-center space-x-3\">\n    <span>CopyrightÂ©2022</span>\n    <span>|</span>\n    <a href=\"https://github.com/darwinia-network/plo-rewards-export\" target=\"_blank\" rel=\"noopener noreferrer\">\n      Github\n    </a>\n    <span>|</span>\n    <a href=\"https://crab.network/plo_contribute\" target=\"_blank\" rel=\"noopener noreferrer\">\n      Crab PLO\n    </a>\n    <span>|</span>\n    <a href=\"https://darwinia.network/plo_contribute\" target=\"_blank\" rel=\"noopener noreferrer\">\n      Darwinia PLO\n    </a>\n  </div>\n);\n","import Big from 'big.js';\nimport { gql } from '@apollo/client';\n\nexport const CRAB_REWARD = 200000000;\nexport const CKTON_REWARD = 8000;\nexport const STAGE_REWARDS_RATE = 0.175; // 17.5%\nexport const MIN_KSM_REWARDS = new Big('0.00000001');\nexport const DOT_PRECISIONS = new Big('10000000000');\nexport const KSM_PRECISIONS = new Big('1000000000000');\n\nexport const GET_CONTRIBUTORS_POWER = gql`\n  query GetContributorsPower($first: Int!, $offset: Int!) {\n    crowdloanWhoStatistics(orderBy: TOTAL_BALANCE_DESC, first: $first, offset: $offset) {\n      totalCount\n      pageInfo {\n        hasNextPage\n      }\n      nodes {\n        user\n        totalPower\n        totalBalance\n      }\n    }\n  }\n`;\n\nexport const GET_REFERRALS_POWER = gql`\n  query GetReferralsPower($first: Int!, $offset: Int!) {\n    crowdloanReferStatistics(first: $first, offset: $offset) {\n      totalCount\n      pageInfo {\n        hasNextPage\n      }\n      nodes {\n        user\n        totalPower\n        totalBalance\n      }\n    }\n  }\n`;\n\nexport const GET_USERS_NFT_CLAIMED = gql`\n  query GetUserNftClaimed($first: Int!, $offset: Int!) {\n    remarkedNftAddresses(orderBy: [EXTRINSIC_TIMESTAMP_ASC], first: $first, offset: $offset) {\n      totalCount\n      pageInfo {\n        hasNextPage\n      }\n      nodes {\n        signer\n        addressValue\n        extrinsicHash\n      }\n    }\n  }\n`;\n","// This icon file is generated automatically.\nvar QuestionCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z\" } }] }, \"name\": \"question-circle\", \"theme\": \"outlined\" };\nexport default QuestionCircleOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport QuestionCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/QuestionCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar QuestionCircleOutlined = function QuestionCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: QuestionCircleOutlinedSvg\n  }));\n};\n\nQuestionCircleOutlined.displayName = 'QuestionCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(QuestionCircleOutlined);","import React from 'react';\nimport { Table, Typography, Tooltip } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport { ColumnsType } from 'antd/es/table';\nimport { shortAddress } from '../../utils';\nimport type { TypeRewardsTableDataSource } from '../../type';\n\ntype TypePros = {\n  loading: boolean;\n  dataSource: TypeRewardsTableDataSource[];\n};\n\nconst columns: ColumnsType<TypeRewardsTableDataSource> = [\n  {\n    title: 'Index',\n    dataIndex: 'index',\n    key: 'index',\n    align: 'center',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n    align: 'center',\n    render: (text: string) => <Typography.Text copyable={{ text: text }}>{shortAddress(text)}</Typography.Text>,\n  },\n  {\n    title: (\n      <div className=\"inline-flex items-center\">\n        As Contributor\n        <Tooltip title=\"ä½ä¸ºContributorè´¡ç®çKSM\">\n          <QuestionCircleOutlined className=\"ml-1\" />\n        </Tooltip>\n      </div>\n    ),\n    dataIndex: 'ksmAsContributor',\n    key: 'ksmAsContributor',\n    align: 'right',\n  },\n  {\n    title: (\n      <div className=\"inline-flex items-center\">\n        As Referral\n        <Tooltip title=\"ä½ä¸ºæ¨èèè´¡ç®çKSM\">\n          <QuestionCircleOutlined className=\"ml-1\" />\n        </Tooltip>\n      </div>\n    ),\n    dataIndex: 'ksmAsReferral',\n    key: 'ksmAsReferral',\n    align: 'right',\n  },\n  {\n    title: (\n      <div className=\"inline-flex items-center\">\n        Stage CRAB\n        <Tooltip title=\"ä¹å®10%ä¹ååºåçCRAB\">\n          <QuestionCircleOutlined className=\"ml-1\" />\n        </Tooltip>\n      </div>\n    ),\n    dataIndex: 'stageCRabRewards',\n    key: 'stageCRabRewards',\n    align: 'right',\n  },\n  {\n    title: (\n      <div className=\"inline-flex items-center\">\n        Stage CKTON\n        <Tooltip title=\"ä¹å®10%ä¹ååºåçCKTON\">\n          <QuestionCircleOutlined className=\"ml-1\" />\n        </Tooltip>\n      </div>\n    ),\n    dataIndex: 'stageCKtonRewards',\n    key: 'stageCKtonRewards',\n    align: 'right',\n  },\n  {\n    title: (\n      <div className=\"inline-flex items-center\">\n        Sent(CRAB)\n        <Tooltip title=\"å·²ç»ååºå»çCRAB\">\n          <QuestionCircleOutlined className=\"ml-1\" />\n        </Tooltip>\n      </div>\n    ),\n    dataIndex: 'sentCRab',\n    key: 'sentCRab',\n    align: 'right',\n  },\n  {\n    title: (\n      <div className=\"inline-flex items-center\">\n        Sent(CKTON)\n        <Tooltip title=\"å·²ç»ååºå»çCKTON\">\n          <QuestionCircleOutlined className=\"ml-1\" />\n        </Tooltip>\n      </div>\n    ),\n    dataIndex: 'sentKton',\n    key: 'sentKton',\n    align: 'right',\n  },\n  {\n    title: (\n      <div className=\"inline-flex items-center\">\n        Differ(CRAB)\n        <Tooltip title=\"ç­äºãStage CRABãåå»ãSent(CRAB)ããçº¢è²è¡¨ç¤ºåå¤äºï¼ç»¿è²è¡¨ç¤ºæªåçæ°é\">\n          <QuestionCircleOutlined className=\"ml-1\" />\n        </Tooltip>\n      </div>\n    ),\n    dataIndex: 'differCrab',\n    key: 'differCrab',\n    align: 'right',\n    render: (text: string) => (\n      <Typography.Text\n        type={\n          text === '0.00000000' || text === '-0.00000000' ? 'secondary' : text.startsWith('-') ? 'danger' : 'success'\n        }\n      >\n        {text}\n      </Typography.Text>\n    ),\n  },\n  {\n    title: (\n      <div className=\"inline-flex items-center\">\n        Differ(CKTON)\n        <Tooltip title=\"ç­äºãStage CKTONãåå»ãSent(CKTON)ããçº¢è²è¡¨ç¤ºåå¤äºï¼ç»¿è²è¡¨ç¤ºæªåçæ°é\">\n          <QuestionCircleOutlined className=\"ml-1\" />\n        </Tooltip>\n      </div>\n    ),\n    dataIndex: 'differKton',\n    key: 'differKton',\n    align: 'right',\n    render: (text: string) => (\n      <Typography.Text\n        type={\n          text === '0.00000000' || text === '-0.00000000' ? 'secondary' : text.startsWith('-') ? 'danger' : 'success'\n        }\n      >\n        {text}\n      </Typography.Text>\n    ),\n  },\n];\n\nconst Component: React.FC<TypePros> = (props) => {\n  const { dataSource, loading } = props;\n  return (\n    <Table\n      columns={columns}\n      dataSource={dataSource}\n      loading={loading}\n      pagination={{\n        defaultPageSize: 50,\n        showQuickJumper: true,\n        showLessItems: true,\n        total: dataSource.length,\n        showTotal: (total) => `Total Items: ${total}`,\n      }}\n      scroll={{ y: 'calc(100vh - 20rem)', x: 'max-content' }}\n    />\n  );\n};\n\nexport const RewardsTable = React.memo<TypePros>(Component);\n","import React, { useState } from 'react';\nimport { Button, Statistic, Breadcrumb, notification, Tooltip } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport { useApolloClient } from '@apollo/client';\nimport { RewardsTable } from './RewardsTable';\nimport { PageLayout, PageContent, PageFooter } from '../../component';\nimport { downloadCsv } from '../../utils';\nimport { GET_CONTRIBUTORS_POWER, GET_REFERRALS_POWER } from '../../config';\nimport { TypeRewardsTableDataSource } from '../../type';\nimport { useNavigate } from 'react-router-dom';\n\nconst Page: React.FC = () => {\n  const client = useApolloClient();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [csvRows, setCsvRows] = useState<string[][]>([]);\n  const [totalPower, setTotalPower] = useState('0');\n  const [totalBalance, setTotalBalance] = useState(Number(0).toFixed(8));\n  const [totalStageCRab, setTotalStageCRab] = useState(Number(0).toFixed(8));\n  const [totalStageCKton, setTotalStageCKton] = useState(Number(0).toFixed(8));\n  const [totalCrabNextSend, setTotalCrabNextSend] = useState(Number(0).toFixed(8));\n  const [totalKtonNextSend, setTotalKtonNextSend] = useState(Number(0).toFixed(8));\n  const [rewardsTableDataSource, setRewardsTableDataSource] = useState<TypeRewardsTableDataSource[]>([]);\n\n  const handleClickCheckAll = async () => {\n    try {\n      setLoading(true);\n\n      const powerReferrals = await client.query({\n        query: GET_REFERRALS_POWER,\n        variables: { first: 0, offset: 0 },\n      });\n      const powerContributors = await client.query({\n        query: GET_CONTRIBUTORS_POWER,\n        variables: { first: 0, offset: 0 },\n      });\n\n      if (\n        powerReferrals.data?.crowdloanReferStatistics.totalCount !==\n        powerReferrals.data?.crowdloanReferStatistics.nodes.length\n      ) {\n        notification.warning({\n          message: 'Query Subql As referral',\n          description: 'nodes length doesnt equal to total count',\n        });\n      }\n      if (\n        powerContributors.data?.crowdloanWhoStatistics.totalCount !==\n        powerContributors.data?.crowdloanWhoStatistics.nodes.length\n      ) {\n        notification.warning({\n          message: 'Query Subql As Contributor',\n          description: 'nodes length doesnt equal to total count',\n        });\n      }\n\n      const worker = new Worker(new URL('./worker.ts', import.meta.url));\n      worker.onerror = (err) => {\n        worker.terminate();\n        console.error('worker error:', err.message);\n      };\n      worker.onmessage = (ev) => {\n        worker.terminate();\n        const {\n          totalPower,\n          totalBalance,\n          csvRows,\n          rewardsTableDataSource,\n          totalStageCRab,\n          totalStageCKton,\n          totalCrabNextSend,\n          totalKtonNextSend,\n        } = ev.data;\n\n        setTotalPower(totalPower);\n        setTotalBalance(totalBalance);\n        setCsvRows(csvRows);\n        setTotalStageCRab(totalStageCRab);\n        setTotalStageCKton(totalStageCKton);\n        setTotalCrabNextSend(totalCrabNextSend);\n        setTotalKtonNextSend(totalKtonNextSend);\n        setRewardsTableDataSource(rewardsTableDataSource);\n        setLoading(false);\n      };\n      worker.postMessage([\n        powerContributors.data?.crowdloanWhoStatistics.nodes || [],\n        powerReferrals.data?.crowdloanReferStatistics.nodes || [],\n      ]);\n    } catch (err) {\n      console.error(err);\n      notification.error({\n        message: 'Oops, something went wrong',\n        description: (err as Error).message,\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleClickDownload = () => {\n    downloadCsv(csvRows.map((e) => e.join(',')).join('\\n'));\n  };\n\n  return (\n    <PageLayout>\n      <PageContent>\n        <div className=\"flex items-center justify-center space-x-24 mb-2\">\n          <div className=\"flex items-center space-x-6\">\n            <Statistic\n              loading={loading}\n              value={totalPower}\n              title={\n                <div className=\"inline-flex items-center\">\n                  Total Power\n                  <Tooltip title=\"ContributorsåReferralsçPoweræ»å\">\n                    <QuestionCircleOutlined className=\"ml-1\" />\n                  </Tooltip>\n                </div>\n              }\n            />\n            <Statistic\n              loading={loading}\n              value={totalBalance}\n              title={\n                <div className=\"inline-flex items-center\">\n                  Total Contribute\n                  <Tooltip title=\"Contributorsè´¡ç®çæ»KSM\">\n                    <QuestionCircleOutlined className=\"ml-1\" />\n                  </Tooltip>\n                </div>\n              }\n            />\n            <Statistic\n              loading={loading}\n              value={totalStageCRab}\n              title={\n                <div className=\"inline-flex items-center\">\n                  Total Stage CRAB\n                  <Tooltip title=\"Stage CRABæ»è®¡\">\n                    <QuestionCircleOutlined className=\"ml-1\" />\n                  </Tooltip>\n                </div>\n              }\n            />\n            <Statistic\n              loading={loading}\n              value={totalStageCKton}\n              title={\n                <div className=\"inline-flex items-center\">\n                  Total Stage CKTON\n                  <Tooltip title=\"Stage CKTONæ»è®¡\">\n                    <QuestionCircleOutlined className=\"ml-1\" />\n                  </Tooltip>\n                </div>\n              }\n            />\n            <Statistic\n              loading={loading}\n              value={totalCrabNextSend}\n              title={\n                <div className=\"inline-flex items-center\">\n                  Total CRAB Next\n                  <Tooltip title=\"è¿éè¦å±è¡¥åè¿ä¹å¤CRAB\">\n                    <QuestionCircleOutlined className=\"ml-1\" />\n                  </Tooltip>\n                </div>\n              }\n            />\n            <Statistic\n              loading={loading}\n              value={totalKtonNextSend}\n              title={\n                <div className=\"inline-flex items-center\">\n                  Total CKTON Next\n                  <Tooltip title=\"è¿éè¦å±è¡¥åè¿ä¹å¤CKTON\">\n                    <QuestionCircleOutlined className=\"ml-1\" />\n                  </Tooltip>\n                </div>\n              }\n            />\n          </div>\n        </div>\n\n        <div className=\"flex items-end justify-between px-px pb-1\">\n          <Breadcrumb>\n            <Breadcrumb.Item className=\"antd-breadcrumb-item\" onClick={() => navigate('/')}>\n              Home\n            </Breadcrumb.Item>\n            <Breadcrumb.Item>Rewards</Breadcrumb.Item>\n          </Breadcrumb>\n          <div className=\"flex justify-end items-end space-x-2 mb-2\">\n            <Button className=\"rounded-md\" onClick={handleClickCheckAll} loading={loading} type=\"primary\">\n              Check All\n            </Button>\n            <Button\n              className=\"rounded-md\"\n              onClick={handleClickDownload}\n              disabled={csvRows.length === 0}\n              loading={loading}\n            >\n              Download CSV\n            </Button>\n          </div>\n        </div>\n\n        <RewardsTable loading={loading} dataSource={rewardsTableDataSource} />\n      </PageContent>\n\n      <PageFooter />\n    </PageLayout>\n  );\n};\n\nexport default React.memo(Page);\n","export type TypeReferralsNode = {\n  user: string;\n  totalPower: string;\n  totalBalance: string;\n};\n\nexport type TypeContributorsNode = {\n  user: string;\n  totalPower: string;\n  totalBalance: string;\n};\n\nexport type TypeGetUserNftClaimedNode = {\n  signer: string;\n  addressValue: string;\n  extrinsicHash: string;\n};\n\nexport type TypeGetUsersNftClaimed = {\n  totalCount: number;\n  pageInfo: {\n    hasNextPage: boolean;\n  };\n  nodes: TypeGetUserNftClaimedNode[];\n};\n\nexport type TypeRewardsTableDataSource = {\n  key: number;\n  index: number;\n  address: string;\n  ksmAsContributor: string;\n  ksmAsReferral: string;\n  stageCRabRewards: string;\n  stageCKtonRewards: string;\n  sentCRab: string;\n  sentKton: string;\n  differCrab: string;\n  differKton: string;\n};\n\nexport enum NftClaimNetworks {\n  CRAB,\n  DARWINIA,\n}\n\nexport type TypeNftTableDataSource = {\n  key: number;\n  index: number;\n  address: string;\n  totalContribute: string;\n  claimAddress: { address: string; extrinsicHash: string; network: NftClaimNetworks } | null;\n  isClaimed: boolean;\n};\n","import { decodeAddress, encodeAddress } from '@polkadot/keyring';\nimport { hexToU8a, u8aToHex } from '@polkadot/util';\nimport { Keyring } from '@polkadot/keyring';\nimport Big from 'big.js';\nimport { ethers } from 'ethers';\nimport {\n  CRAB_REWARD,\n  CKTON_REWARD,\n  DOT_PRECISIONS,\n  KSM_PRECISIONS,\n  MIN_KSM_REWARDS,\n  STAGE_REWARDS_RATE,\n} from './config';\nimport type {\n  TypeGetUserNftClaimedNode,\n  TypeContributorsNode,\n  TypeReferralsNode,\n  TypeRewardsTableDataSource,\n  TypeNftTableDataSource,\n} from './type';\nimport { NftClaimNetworks } from './type';\n\nexport const shortAddress = (address = '') => {\n  if (address.length && address.length > 12) {\n    return `${address.slice(0, 5)}...${address.slice(address.length - 5)}`;\n  }\n  return address;\n};\n\nexport const polkadotAddressToPublicKey = (address: string) => u8aToHex(decodeAddress(address));\nexport const publicKeyToPolkadotAddress = (publicKey: string) => {\n  try {\n    const address = encodeAddress(hexToU8a(publicKey));\n    const keyring = new Keyring();\n    keyring.setSS58Format(2); // Kusama format address\n    return keyring.addFromAddress(address).address;\n  } catch (error) {\n    console.error(error);\n    return publicKey;\n  }\n};\n\nexport const downloadCsv = (data: string, filename = 'transferx.csv', type = 'data:text/csv;charset=utf-8') => {\n  const file = new Blob(['\\ufeff' + data], { type: type });\n  const url = URL.createObjectURL(file);\n\n  const a = document.createElement('a');\n  a.style.display = 'none';\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n\n  setTimeout(function () {\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }, 0);\n};\n\nexport const transformRewardsData = (\n  nodesContributor: TypeContributorsNode[],\n  nodesReferral: TypeReferralsNode[],\n  dataSent: string[][] = []\n) => {\n  let totalPower = Big(0);\n  let totalBalance = Big(0);\n  let totalStageCRab = Big(0);\n  let totalStageCKton = Big(0);\n  let totalCrabNextSend = Big(0);\n  let totalKtonNextSend = Big(0);\n  const csvRows: string[][] = [];\n  const rewardsTableDataSource: TypeRewardsTableDataSource[] = [];\n\n  nodesReferral.forEach((node) => {\n    totalPower = totalPower.add(node.totalPower);\n  });\n  nodesContributor.forEach((node) => {\n    totalPower = totalPower.add(node.totalPower);\n    totalBalance = totalBalance.add(node.totalBalance);\n  });\n\n  nodesContributor.forEach((nodeContributor) => {\n    const nodeReferral = nodesReferral.find((v) => v.user === polkadotAddressToPublicKey(nodeContributor.user));\n    const share = Big(nodeContributor.totalPower)\n      .add(nodeReferral ? nodeReferral.totalPower : 0)\n      .div(totalPower);\n\n    const stageCRabReward = share.times(CRAB_REWARD).times(STAGE_REWARDS_RATE);\n    const stageCKtonReward = share.times(CKTON_REWARD).times(STAGE_REWARDS_RATE);\n\n    totalStageCRab = totalStageCRab.add(stageCRabReward);\n    totalStageCKton = totalStageCKton.add(stageCKtonReward);\n\n    const sentCrab = dataSent.find((v) => v[0] === nodeContributor.user && v[1] === 'ring');\n    const sentKton = dataSent.find((v) => v[0] === nodeContributor.user && v[1] === 'kton');\n\n    const differCrab = stageCRabReward.minus(sentCrab ? sentCrab[2] : 0);\n    const differKton = stageCKtonReward.minus(sentKton ? sentKton[2] : 0);\n    if (differCrab.gte(MIN_KSM_REWARDS)) {\n      totalCrabNextSend = totalCrabNextSend.add(differCrab);\n      csvRows.push([nodeContributor.user, 'ring', differCrab.toFixed(8), 'kusama']);\n    }\n    if (differKton.gte(MIN_KSM_REWARDS)) {\n      totalKtonNextSend = totalKtonNextSend.add(differKton);\n      csvRows.push([nodeContributor.user, 'kton', differKton.toFixed(8), 'kusama']);\n    }\n\n    rewardsTableDataSource.push({\n      key: rewardsTableDataSource.length,\n      index: rewardsTableDataSource.length + 1,\n      address: nodeContributor.user,\n      ksmAsContributor: Big(nodeContributor.totalBalance).div(KSM_PRECISIONS).toFixed(8),\n      ksmAsReferral: Big(nodeReferral ? nodeReferral.totalBalance : 0)\n        .div(KSM_PRECISIONS)\n        .toFixed(8),\n      stageCRabRewards: stageCRabReward.toFixed(8),\n      stageCKtonRewards: stageCKtonReward.toFixed(8),\n      sentCRab: sentCrab ? sentCrab[2] : '0.00000000',\n      sentKton: sentKton ? sentKton[2] : '0.00000000',\n      differCrab: differCrab.toFixed(8),\n      differKton: differKton.toFixed(8),\n    });\n  });\n\n  nodesReferral.forEach((nodeReferral) => {\n    const address = publicKeyToPolkadotAddress(nodeReferral.user);\n    if (!rewardsTableDataSource.find((v) => v.address === address)) {\n      const share = Big(nodeReferral.totalPower).div(totalPower);\n      const stageCRabReward = share.times(CRAB_REWARD).times(STAGE_REWARDS_RATE);\n      const stageCKtonReward = share.times(CKTON_REWARD).times(STAGE_REWARDS_RATE);\n\n      totalStageCRab = totalStageCRab.add(stageCRabReward);\n      totalStageCKton = totalStageCKton.add(stageCKtonReward);\n\n      const sentCrab = dataSent.find((v) => v[0] === address && v[1] === 'ring');\n      const sentKton = dataSent.find((v) => v[0] === address && v[1] === 'kton');\n\n      const differCrab = stageCRabReward.minus(sentCrab ? sentCrab[2] : 0);\n      const differKton = stageCKtonReward.minus(sentKton ? sentKton[2] : 0);\n      if (differCrab.gte(MIN_KSM_REWARDS)) {\n        totalCrabNextSend = totalCrabNextSend.add(differCrab);\n        csvRows.push([address, 'ring', differCrab.toFixed(8), 'kusama']);\n      }\n      if (differKton.gte(MIN_KSM_REWARDS)) {\n        totalKtonNextSend = totalKtonNextSend.add(differKton);\n        csvRows.push([address, 'kton', differKton.toFixed(8), 'kusama']);\n      }\n\n      rewardsTableDataSource.push({\n        key: rewardsTableDataSource.length,\n        index: rewardsTableDataSource.length + 1,\n        address: address,\n        ksmAsContributor: Big(0).toFixed(8),\n        ksmAsReferral: Big(nodeReferral.totalBalance).div(KSM_PRECISIONS).toFixed(8),\n        stageCRabRewards: stageCRabReward.toFixed(8),\n        stageCKtonRewards: stageCKtonReward.toFixed(8),\n        sentCRab: sentCrab ? sentCrab[2] : '0.00000000',\n        sentKton: sentKton ? sentKton[2] : '0.00000000',\n        differCrab: differCrab.toFixed(8),\n        differKton: differKton.toFixed(8),\n      });\n    }\n  });\n\n  return {\n    totalPower: totalPower.toString(),\n    totalBalance: totalBalance.div(KSM_PRECISIONS).toFixed(8),\n    totalStageCRab: totalStageCRab.toFixed(8),\n    totalStageCKton: totalStageCKton.toFixed(8),\n    totalCrabNextSend: totalCrabNextSend.toFixed(8),\n    totalKtonNextSend: totalKtonNextSend.toFixed(8),\n    csvRows,\n    rewardsTableDataSource,\n  };\n};\n\nexport const transformNftsData = (data: string[][], nodes: TypeGetUserNftClaimedNode[], network: NftClaimNetworks) => {\n  const csvRowsTotal: string[][] = [];\n  const csvRowsClaimed: string[][] = [];\n  const csvRowsUnclaim: string[][] = [];\n  let nftTableDataSource: TypeNftTableDataSource[] = [];\n\n  const precision = network === NftClaimNetworks.CRAB ? KSM_PRECISIONS : DOT_PRECISIONS;\n\n  for (let value of data) {\n    const claim = nodes?.find((v) => v.signer === value[0]);\n    const contribute = Big(value[1]).div(precision).toFixed(8);\n    nftTableDataSource.push({\n      key: 0,\n      index: 0,\n      address: value[0],\n      totalContribute: contribute,\n      claimAddress: claim ? { address: claim.addressValue, extrinsicHash: claim.extrinsicHash, network } : null,\n      isClaimed: claim ? true : false,\n    });\n    csvRowsTotal.push([value[0], claim ? claim.addressValue : 'unclaim', contribute]);\n    claim && ethers.utils.isAddress(claim.addressValue)\n      ? csvRowsClaimed.push([value[0], claim.addressValue, contribute])\n      : csvRowsUnclaim.push([value[0], contribute]);\n  }\n\n  nftTableDataSource = nftTableDataSource.map((value, index) => ({\n    ...value,\n    key: index,\n    index: nftTableDataSource.length - index,\n  }));\n\n  return {\n    nftTableDataSource,\n    csvRowsTotal,\n    csvRowsClaimed,\n    csvRowsUnclaim,\n  };\n};\n"],"names":["columns","title","dataIndex","key","align","render","text","copyable","shortAddress","className","address","type","ethers","target","href","network","NftClaimNetworks","extrinsicHash","bool","filters","value","onFilter","record","isClaimed","Component","props","dataSource","loading","pagination","defaultPageSize","showQuickJumper","showLessItems","total","length","showTotal","scroll","y","x","NftTable","React","Layout","children","PageLayout","Content","PageContent","PageFooter","rel","Big","GET_CONTRIBUTORS_POWER","gql","GET_REFERRALS_POWER","GET_USERS_NFT_CLAIMED","QuestionCircleOutlined","ref","AntdIcon","_objectSpread","icon","QuestionCircleOutlinedSvg","displayName","startsWith","RewardsTable","Page","client","useApolloClient","navigate","useNavigate","setLoading","useState","csvRows","setCsvRows","totalPower","setTotalPower","totalBalance","setTotalBalance","Number","toFixed","totalStageCRab","setTotalStageCRab","totalStageCKton","setTotalStageCKton","totalCrabNextSend","setTotalCrabNextSend","totalKtonNextSend","setTotalKtonNextSend","rewardsTableDataSource","setRewardsTableDataSource","onClick","async","powerReferrals","query","variables","first","offset","powerContributors","data","crowdloanReferStatistics","totalCount","nodes","notification","message","description","crowdloanWhoStatistics","worker","Worker","URL","onerror","err","terminate","console","error","onmessage","ev","postMessage","downloadCsv","map","e","join","disabled","slice","filename","file","Blob","url","createObjectURL","a","document","createElement","style","display","download","body","appendChild","click","setTimeout","removeChild","window","revokeObjectURL"],"sourceRoot":""}