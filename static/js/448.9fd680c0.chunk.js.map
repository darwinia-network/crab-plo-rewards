{"version":3,"file":"static/js/448.9fd680c0.chunk.js","mappings":"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","sources":["component/PageLayout.tsx","component/PageContent.tsx","component/PageFooter.tsx","config.ts","../node_modules/@ant-design/icons-svg/es/asn/QuestionCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/QuestionCircleOutlined.js","page/rewards/RewardsTable.tsx","page/rewards/index.tsx","utils.ts"],"sourcesContent":["import React from 'react';\n\ntype TypeProps = {\n  className?: string;\n  children?: React.ReactNode;\n};\n\nconst Layout: React.FC<TypeProps> = (props) => (\n  <div className={`container mx-auto h-screen relative pb-14 ${props.className}`}>\n    {props.children}\n  </div>\n);\n\nexport const PageLayout = React.memo<TypeProps>(Layout);\n","import React from 'react';\n\ntype TypeProps = {\n  className?: string;\n  children?: React.ReactNode;\n};\n\nconst Content: React.FC<TypeProps> = (props) => (\n  <div className={`pt-6 page-content-height ${props.className}`}>\n    {props.children}\n  </div>\n);\n\nexport const PageContent = React.memo<TypeProps>(Content);\n","import React from 'react';\n\nexport const PageFooter: React.FC = () => (\n  <div className='absolute top-auto bottom-0 h-12 w-full flex justify-center items-center space-x-3'>\n    <span>CopyrightÂ©2022</span>\n    <span>|</span>\n    <a href='https://github.com/darwinia-network/crab-plo-rewards' target='_blank' rel='noopener noreferrer'>Github</a>\n    <span>|</span>\n    <a href='https://crab.network/plo_contribute' target='_blank' rel='noopener noreferrer'>PLO</a>\n  </div>\n);\n","import Big from 'big.js';\nimport { gql } from \"@apollo/client\";\n\nexport const CRAB_REWARD = 200000000;\nexport const CKTON_REWARD = 8000;\nexport const STAGE_REWARDS_RATE = 0.15;  // 15%\nexport const MIN_KSM_REWARDS = new Big('0.00000001');\nexport const KSM_PRECISIONS = new Big(\"1000000000000\");\n\nexport const GET_CONTRIBUTORS_POWER = gql`\n  query GetContributorsPower($first: Int!, $offset: Int!) {\n    crowdloanWhoStatistics(orderBy: TOTAL_BALANCE_DESC, first: $first, offset: $offset) {\n      totalCount\n      pageInfo{\n        hasNextPage\n      }\n      nodes {\n        user\n        totalPower\n        totalBalance\n      }\n    }\n  }\n`;\n\nexport const GET_REFERRALS_POWER = gql`\n  query GetReferralsPower($first: Int!, $offset: Int!) {\n    crowdloanReferStatistics(first: $first, offset: $offset) {\n      totalCount\n      pageInfo {\n        hasNextPage\n      }\n      nodes {\n        user\n        totalPower\n        totalBalance\n      }\n    }\n  }\n`;\n\nexport const GET_USERS_NFT_CLAIMED = gql`\n  query GetUserNftClaimed($first: Int!, $offset: Int!) {\n    remarkedNftAddresses(orderBy: [EXTRINSIC_TIMESTAMP_ASC], first: $first, offset: $offset) {\n      totalCount\n      pageInfo {\n        hasNextPage\n      }\n      nodes {\n        signer\n        addressValue\n        extrinsicHash\n      }\n    }\n  }\n`;\n","// This icon file is generated automatically.\nvar QuestionCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z\" } }] }, \"name\": \"question-circle\", \"theme\": \"outlined\" };\nexport default QuestionCircleOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport QuestionCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/QuestionCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar QuestionCircleOutlined = function QuestionCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: QuestionCircleOutlinedSvg\n  }));\n};\n\nQuestionCircleOutlined.displayName = 'QuestionCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(QuestionCircleOutlined);","import React from 'react';\nimport { Table, Typography, Tooltip } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport { ColumnsType } from 'antd/es/table';\nimport { shortAddress } from '../../utils';\nimport type { TypeRewardsTableDataSource } from '../../type';\n\ntype TypePros = {\n  loading: boolean;\n  dataSource: TypeRewardsTableDataSource[];\n}\n\nconst columns: ColumnsType<TypeRewardsTableDataSource> = [\n  {\n    title: 'Index',\n    dataIndex: 'index',\n    key: 'index',\n    align: 'center',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n    align: 'center',\n    render: (text: string) => (\n      <Typography.Text copyable={{ text: text }}>{shortAddress(text)}</Typography.Text>\n    )\n  },\n  {\n    title: <div className='inline-flex items-center'>As Contributor<Tooltip title=\"ä½ä¸ºContributorè´¡ç®çKSM\"><QuestionCircleOutlined className=\"ml-1\" /></Tooltip></div>,\n    dataIndex: 'ksmAsContributor',\n    key: 'ksmAsContributor',\n    align: 'right',\n  },\n  {\n    title: <div className='inline-flex items-center'>As Referral<Tooltip title=\"ä½ä¸ºæ¨èèè´¡ç®çKSM\"><QuestionCircleOutlined className=\"ml-1\" /></Tooltip></div>,\n    dataIndex: 'ksmAsReferral',\n    key: 'ksmAsReferral',\n    align: 'right',\n  },\n  {\n    title: <div className='inline-flex items-center'>Stage CRAB<Tooltip title=\"ä¹å®10%ä¹ååºåçCRAB\"><QuestionCircleOutlined className=\"ml-1\" /></Tooltip></div>,\n    dataIndex: 'stageCRabRewards',\n    key: 'stageCRabRewards',\n    align: 'right',\n  },\n  {\n    title: <div className='inline-flex items-center'>Stage CKTON<Tooltip title=\"ä¹å®10%ä¹ååºåçCKTON\"><QuestionCircleOutlined className=\"ml-1\" /></Tooltip></div>,\n    dataIndex: 'stageCKtonRewards',\n    key: 'stageCKtonRewards',\n    align: 'right',\n  },\n  {\n    title: <div className='inline-flex items-center'>Sent(CRAB)<Tooltip title=\"å·²ç»ååºå»çCRAB\"><QuestionCircleOutlined className=\"ml-1\" /></Tooltip></div>,\n    dataIndex: 'sentCRab',\n    key: 'sentCRab',\n    align: 'right',\n  },\n  {\n    title: <div className='inline-flex items-center'>Sent(CKTON)<Tooltip title=\"å·²ç»ååºå»çCKTON\"><QuestionCircleOutlined className=\"ml-1\" /></Tooltip></div>,\n    dataIndex: 'sentKton',\n    key: 'sentKton',\n    align: 'right',\n  },\n  {\n    title: <div className='inline-flex items-center'>Differ(CRAB)<Tooltip title=\"ç­äºãStage CRABãåå»ãSent(CRAB)ããçº¢è²è¡¨ç¤ºåå¤äºï¼ç»¿è²è¡¨ç¤ºæªåçæ°é\"><QuestionCircleOutlined className=\"ml-1\" /></Tooltip></div>,\n    dataIndex: 'differCrab',\n    key: 'differCrab',\n    align: 'right',\n    render: (text: string) => (\n      <Typography.Text type={(text === '0.00000000' || text === '-0.00000000') ? 'secondary' : text.startsWith('-') ? 'danger' : 'success'}>{text}</Typography.Text>\n    ),\n  },\n  {\n    title: <div className='inline-flex items-center'>Differ(CKTON)<Tooltip title=\"ç­äºãStage CKTONãåå»ãSent(CKTON)ããçº¢è²è¡¨ç¤ºåå¤äºï¼ç»¿è²è¡¨ç¤ºæªåçæ°é\"><QuestionCircleOutlined className=\"ml-1\" /></Tooltip></div>,\n    dataIndex: 'differKton',\n    key: 'differKton',\n    align: 'right',\n    render: (text: string) => (\n      <Typography.Text type={(text === '0.00000000' || text === '-0.00000000') ? 'secondary' : text.startsWith('-') ? 'danger' : 'success'}>{text}</Typography.Text>\n    ),\n  },\n];\n\nconst Component: React.FC<TypePros> = (props) => {\n  const { dataSource, loading } = props;\n  return (\n    <Table\n      columns={columns}\n      dataSource={dataSource}\n      loading={loading}\n      pagination={{ defaultPageSize: 50, showQuickJumper: true, showLessItems: true, total: dataSource.length, showTotal: total => `Total Items: ${total}` }}\n      scroll={{ y: 'calc(100vh - 20rem)', x: 'max-content' }}\n    />\n  );\n};\n\nexport const RewardsTable = React.memo<TypePros>(Component);\n","import React, { useState } from 'react';\nimport { Button, Statistic, Breadcrumb, notification, Tooltip } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport { useApolloClient } from \"@apollo/client\";\nimport { RewardsTable } from './RewardsTable';\nimport { PageLayout, PageContent, PageFooter } from '../../component';\nimport { downloadCsv } from '../../utils';\nimport { GET_CONTRIBUTORS_POWER, GET_REFERRALS_POWER } from '../../config';\nimport { TypeRewardsTableDataSource } from '../../type';\nimport { useNavigate } from 'react-router-dom';\n\nconst Page: React.FC = () => {\n  const client = useApolloClient();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [csvRows, setCsvRows] = useState<string[][]>([]);\n  const [totalPower, setTotalPower] = useState('0');\n  const [totalBalance, setTotalBalance] = useState(Number(0).toFixed(8));\n  const [totalStageCRab, setTotalStageCRab] = useState(Number(0).toFixed(8));\n  const [totalStageCKton, setTotalStageCKton] = useState(Number(0).toFixed(8));\n  const [totalCrabNextSend, setTotalCrabNextSend] = useState(Number(0).toFixed(8));\n  const [totalKtonNextSend, setTotalKtonNextSend] = useState(Number(0).toFixed(8));\n  const [rewardsTableDataSource, setRewardsTableDataSource] = useState<TypeRewardsTableDataSource[]>([]);\n\n  const handleClickCheckAll = async () => {\n    try {\n      setLoading(true);\n\n      const powerReferrals = await client.query({\n        query: GET_REFERRALS_POWER,\n        variables: { first: 0, offset: 0 },\n      });\n      const powerContributors = await client.query({\n        query: GET_CONTRIBUTORS_POWER,\n        variables: { first: 0, offset: 0 },\n      });\n\n      if (powerReferrals.data?.crowdloanReferStatistics.totalCount !== powerReferrals.data?.crowdloanReferStatistics.nodes.length) {\n        notification.warning({\n          message: 'Query Subql As referral',\n          description: 'nodes length doesnt equal to total count',\n        })\n      }\n      if (powerContributors.data?.crowdloanWhoStatistics.totalCount !== powerContributors.data?.crowdloanWhoStatistics.nodes.length) {\n        notification.warning({\n          message: 'Query Subql As Contributor',\n          description: 'nodes length doesnt equal to total count',\n        })\n      }\n\n      const worker = new Worker(new URL('./worker.ts', import.meta.url));\n      worker.onerror = (err) => {\n        worker.terminate();\n        console.error('worker error:', err.message);\n      }\n      worker.onmessage = (ev) => {\n        worker.terminate();\n        const {\n          totalPower, totalBalance,\n          csvRows, rewardsTableDataSource,\n          totalStageCRab, totalStageCKton,\n          totalCrabNextSend, totalKtonNextSend,\n        } = ev.data;\n\n        setTotalPower(totalPower);\n        setTotalBalance(totalBalance);\n        setCsvRows(csvRows);\n        setTotalStageCRab(totalStageCRab);\n        setTotalStageCKton(totalStageCKton);\n        setTotalCrabNextSend(totalCrabNextSend);\n        setTotalKtonNextSend(totalKtonNextSend);\n        setRewardsTableDataSource(rewardsTableDataSource);\n        setLoading(false);\n      }\n      worker.postMessage([\n        powerContributors.data?.crowdloanWhoStatistics.nodes || [],\n        powerReferrals.data?.crowdloanReferStatistics.nodes || []\n      ]);\n    } catch (err) {\n      console.error(err);\n      notification.error({\n        message: 'Oops, something went wrong',\n        description: (err as Error).message,\n      });\n      setLoading(false);\n    }\n  }\n\n  const handleClickDownload = () => {\n    downloadCsv(csvRows.map(e => e.join(\",\")).join(\"\\n\"));\n  }\n\n  return (\n    <PageLayout>\n      <PageContent>\n        <div className='flex items-center justify-center space-x-24 mb-2'>\n          <div className='flex items-center space-x-6'>\n            <Statistic loading={loading} value={totalPower}\n              title={<div className='inline-flex items-center'>Total Power<Tooltip title=\"ContributorsåReferralsçPoweræ»å\"><QuestionCircleOutlined className=\"ml-1\" /></Tooltip></div>}\n            />\n            <Statistic loading={loading} value={totalBalance}\n              title={<div className='inline-flex items-center'>Total Contribute<Tooltip title=\"Contributorsè´¡ç®çæ»KSM\"><QuestionCircleOutlined className=\"ml-1\" /></Tooltip></div>}\n            />\n            <Statistic loading={loading} value={totalStageCRab}\n              title={<div className='inline-flex items-center'>Total Stage CRAB<Tooltip title=\"Stage CRABæ»è®¡\"><QuestionCircleOutlined className=\"ml-1\" /></Tooltip></div>}\n            />\n            <Statistic loading={loading} value={totalStageCKton}\n              title={<div className='inline-flex items-center'>Total Stage CKTON<Tooltip title=\"Stage CKTONæ»è®¡\"><QuestionCircleOutlined className=\"ml-1\" /></Tooltip></div>}\n            />\n            <Statistic loading={loading} value={totalCrabNextSend}\n              title={<div className='inline-flex items-center'>Total CRAB Next<Tooltip title=\"è¿éè¦å±è¡¥åè¿ä¹å¤CRAB\"><QuestionCircleOutlined className=\"ml-1\" /></Tooltip></div>}\n            />\n            <Statistic loading={loading} value={totalKtonNextSend}\n              title={<div className='inline-flex items-center'>Total CKTON Next<Tooltip title=\"è¿éè¦å±è¡¥åè¿ä¹å¤CKTON\"><QuestionCircleOutlined className=\"ml-1\" /></Tooltip></div>}\n            />\n          </div>\n        </div>\n\n        <div className='flex items-end justify-between px-px pb-1'>\n          <Breadcrumb>\n            <Breadcrumb.Item className='antd-breadcrumb-item' onClick={() => navigate('/')}>Home</Breadcrumb.Item>\n            <Breadcrumb.Item>Rewards</Breadcrumb.Item>\n          </Breadcrumb>\n          <div className='flex justify-end items-end space-x-2 mb-2'>\n            <Button className='rounded-md' onClick={handleClickCheckAll} loading={loading} type='primary'>\n              Check All\n            </Button>\n            <Button className='rounded-md' onClick={handleClickDownload} disabled={csvRows.length === 0} loading={loading}>Download CSV</Button>\n          </div>\n        </div>\n\n        <RewardsTable\n          loading={loading}\n          dataSource={rewardsTableDataSource}\n        />\n      </PageContent>\n\n      <PageFooter />\n    </PageLayout>\n  );\n};\n\nexport default React.memo(Page);\n","import { decodeAddress, encodeAddress } from \"@polkadot/keyring\";\nimport { hexToU8a, u8aToHex } from \"@polkadot/util\";\nimport { Keyring } from \"@polkadot/keyring\";\nimport Big from 'big.js';\nimport { ethers } from 'ethers';\nimport { CRAB_REWARD, CKTON_REWARD, KSM_PRECISIONS, MIN_KSM_REWARDS, STAGE_REWARDS_RATE } from './config';\nimport type {\n  TypeGetUserNftClaimedNode,\n  TypeContributorsNode, TypeReferralsNode,\n  TypeRewardsTableDataSource, TypeNftTableDataSource\n} from './type';\n\nexport const shortAddress = (address = \"\") => {\n  if (address.length && address.length > 12) {\n    return `${address.slice(0, 5)}...${address.slice(address.length - 5)}`;\n  }\n  return address;\n};\n\nexport const polkadotAddressToPublicKey = (address: string) => u8aToHex(decodeAddress(address));\nexport const publicKeyToPolkadotAddress = (publicKey: string) => {\n  try {\n    const address = encodeAddress(hexToU8a(publicKey));\n    const keyring = new Keyring();\n    keyring.setSS58Format(2); // Kusama format address\n    return keyring.addFromAddress(address).address;\n  } catch (error) {\n    console.error(error);\n    return publicKey;\n  }\n};\n\nexport const downloadCsv = (data: string, filename = 'transferx.csv', type = 'data:text/csv;charset=utf-8') => {\n  const file = new Blob([\"\\ufeff\" + data], { type: type });\n  const url = URL.createObjectURL(file);\n\n  const a = document.createElement(\"a\");\n  a.style.display = 'none';\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n\n  setTimeout(function() {\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }, 0);\n};\n\nexport const transformRewardsData = (nodesContributor: TypeContributorsNode[], nodesReferral: TypeReferralsNode[], dataSent: string[][] = []) => {\n  let totalPower = Big(0);\n  let totalBalance = Big(0);\n  let totalStageCRab = Big(0);\n  let totalStageCKton = Big(0);\n  let totalCrabNextSend = Big(0);\n  let totalKtonNextSend = Big(0);\n  const csvRows: string[][] = [];\n  const rewardsTableDataSource: TypeRewardsTableDataSource[] = [];\n\n  nodesReferral.forEach(node => {\n    totalPower = totalPower.add(node.totalPower);\n  });\n  nodesContributor.forEach(node => {\n    totalPower = totalPower.add(node.totalPower);\n    totalBalance = totalBalance.add(node.totalBalance);\n  });\n\n  nodesContributor.forEach((nodeContributor) => {\n    const nodeReferral = nodesReferral.find(v => v.user === polkadotAddressToPublicKey(nodeContributor.user));\n    const share = Big(nodeContributor.totalPower).add(nodeReferral ? nodeReferral.totalPower : 0).div(totalPower);\n\n    const stageCRabReward = share.times(CRAB_REWARD).times(STAGE_REWARDS_RATE);\n    const stageCKtonReward = share.times(CKTON_REWARD).times(STAGE_REWARDS_RATE);\n\n    totalStageCRab = totalStageCRab.add(stageCRabReward);\n    totalStageCKton = totalStageCKton.add(stageCKtonReward);\n\n    const sentCrab = dataSent.find(v => v[0] === nodeContributor.user && v[1] === 'ring');\n    const sentKton = dataSent.find(v => v[0] === nodeContributor.user && v[1] === 'kton');\n\n    const differCrab = stageCRabReward.minus(sentCrab ? sentCrab[2] : 0);\n    const differKton = stageCKtonReward.minus(sentKton ? sentKton[2] : 0);\n    if (differCrab.gte(MIN_KSM_REWARDS)) {\n      totalCrabNextSend = totalCrabNextSend.add(differCrab);\n      csvRows.push([nodeContributor.user, 'ring', differCrab.toFixed(8), 'kusama']);\n    }\n    if (differKton.gte(MIN_KSM_REWARDS)) {\n      totalKtonNextSend = totalKtonNextSend.add(differKton);\n      csvRows.push([nodeContributor.user, 'kton', differKton.toFixed(8), 'kusama']);\n    }\n\n    rewardsTableDataSource.push({\n      key: rewardsTableDataSource.length,\n      index: rewardsTableDataSource.length + 1,\n      address: nodeContributor.user,\n      ksmAsContributor: Big(nodeContributor.totalBalance).div(KSM_PRECISIONS).toFixed(8),\n      ksmAsReferral: Big(nodeReferral ? nodeReferral.totalBalance : 0).div(KSM_PRECISIONS).toFixed(8),\n      stageCRabRewards: stageCRabReward.toFixed(8),\n      stageCKtonRewards: stageCKtonReward.toFixed(8),\n      sentCRab: sentCrab ? sentCrab[2] : '0.00000000',\n      sentKton: sentKton ? sentKton[2] : '0.00000000',\n      differCrab: differCrab.toFixed(8),\n      differKton: differKton.toFixed(8),\n    });\n  });\n\n  nodesReferral.forEach((nodeReferral) => {\n    const address = publicKeyToPolkadotAddress(nodeReferral.user);\n    if (!rewardsTableDataSource.find(v => v.address === address)) {\n      const share = Big(nodeReferral.totalPower).div(totalPower);\n      const stageCRabReward = share.times(CRAB_REWARD).times(STAGE_REWARDS_RATE);\n      const stageCKtonReward = share.times(CKTON_REWARD).times(STAGE_REWARDS_RATE);\n\n      totalStageCRab = totalStageCRab.add(stageCRabReward);\n      totalStageCKton = totalStageCKton.add(stageCKtonReward);\n\n      const sentCrab = dataSent.find(v => v[0] === address && v[1] === 'ring');\n      const sentKton = dataSent.find(v => v[0] === address && v[1] === 'kton');\n\n      const differCrab = stageCRabReward.minus(sentCrab ? sentCrab[2] : 0);\n      const differKton = stageCKtonReward.minus(sentKton ? sentKton[2] : 0);\n      if (differCrab.gte(MIN_KSM_REWARDS)) {\n        totalCrabNextSend = totalCrabNextSend.add(differCrab);\n        csvRows.push([address, 'ring', differCrab.toFixed(8), 'kusama']);\n      }\n      if (differKton.gte(MIN_KSM_REWARDS)) {\n        totalKtonNextSend = totalKtonNextSend.add(differKton);\n        csvRows.push([address, 'kton', differKton.toFixed(8), 'kusama']);\n      }\n\n      rewardsTableDataSource.push({\n        key: rewardsTableDataSource.length,\n        index: rewardsTableDataSource.length + 1,\n        address: address,\n        ksmAsContributor: Big(0).toFixed(8),\n        ksmAsReferral: Big(nodeReferral.totalBalance).div(KSM_PRECISIONS).toFixed(8),\n        stageCRabRewards: stageCRabReward.toFixed(8),\n        stageCKtonRewards: stageCKtonReward.toFixed(8),\n        sentCRab: sentCrab ? sentCrab[2] : '0.00000000',\n        sentKton: sentKton ? sentKton[2] : '0.00000000',\n        differCrab: differCrab.toFixed(8),\n        differKton: differKton.toFixed(8),\n      });\n    }\n  });\n\n  return {\n    totalPower: totalPower.toString(),\n    totalBalance: totalBalance.div(KSM_PRECISIONS).toFixed(8),\n    totalStageCRab: totalStageCRab.toFixed(8),\n    totalStageCKton: totalStageCKton.toFixed(8),\n    totalCrabNextSend: totalCrabNextSend.toFixed(8),\n    totalKtonNextSend: totalKtonNextSend.toFixed(8),\n    csvRows, rewardsTableDataSource,\n  };\n};\n\nexport const transformNftsData = (data: string[][], nodes: TypeGetUserNftClaimedNode[]) => {\n  const csvRows: string[] = [];\n  let nftTableDataSource: TypeNftTableDataSource[] = [];\n\n  for (let value of data) {\n    const claim = nodes?.find(v => v.signer === value[0]);\n    nftTableDataSource.push({\n      key: 0,\n      index: 0,\n      address: value[0],\n      ksmContribute: Big(value[1]).div(KSM_PRECISIONS).toFixed(8),\n      claimAddress: claim ? { address: claim.addressValue, extrinsicHash: claim.extrinsicHash } : null,\n      isClaimed: claim ? true :false,\n    });\n    claim && ethers.utils.isAddress(claim.addressValue) && csvRows.push(claim.addressValue);\n  }\n\n  nftTableDataSource = nftTableDataSource.map((value, index) => ({\n    ...value,\n    key: index,\n    index: nftTableDataSource.length - index,\n  }));\n\n  return {\n    csvRows, nftTableDataSource,\n  };\n};\n\n"],"names":["Layout","props","className","children","PageLayout","React","Content","PageContent","PageFooter","href","target","rel","Big","KSM_PRECISIONS","GET_CONTRIBUTORS_POWER","gql","GET_REFERRALS_POWER","GET_USERS_NFT_CLAIMED","QuestionCircleOutlined","ref","AntdIcon","_objectSpread","icon","QuestionCircleOutlinedSvg","displayName","columns","title","dataIndex","key","align","render","text","copyable","shortAddress","type","startsWith","Component","dataSource","loading","pagination","defaultPageSize","showQuickJumper","showLessItems","total","length","showTotal","scroll","y","x","RewardsTable","Page","client","useApolloClient","navigate","useNavigate","setLoading","useState","csvRows","setCsvRows","totalPower","setTotalPower","totalBalance","setTotalBalance","Number","toFixed","totalStageCRab","setTotalStageCRab","totalStageCKton","setTotalStageCKton","totalCrabNextSend","setTotalCrabNextSend","totalKtonNextSend","setTotalKtonNextSend","rewardsTableDataSource","setRewardsTableDataSource","value","onClick","async","powerReferrals","query","variables","first","offset","powerContributors","data","crowdloanReferStatistics","totalCount","nodes","notification","message","description","crowdloanWhoStatistics","worker","Worker","URL","onerror","err","terminate","console","error","onmessage","ev","postMessage","downloadCsv","map","e","join","disabled","address","slice","filename","file","Blob","url","createObjectURL","a","document","createElement","style","display","download","body","appendChild","click","setTimeout","removeChild","window","revokeObjectURL","transformNftsData","nftTableDataSource","claim","find","v","signer","push","index","ksmContribute","div","claimAddress","addressValue","extrinsicHash","isClaimed","ethers"],"sourceRoot":""}